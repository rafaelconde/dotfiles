{"name":"atom-ternjs","main":"./lib/atom-ternjs","version":"0.14.2","private":false,"description":"JavaScript code intelligence for atom with Tern. Adds support for ES5, ES6 (JavaScript 2015), Node.js, jQuery & Angular. Extendable via plugins. Uses suggestion provider by autocomplete-plus.","activationCommands":{},"repository":{"type":"git","url":"git+https://github.com/tststs/atom-ternjs.git"},"license":"MIT","engines":{"atom":">=1.2.0"},"dependencies":{"loophole":"^1.1.0","tern":"^0.18.0","tern-lint":"^0.6.0","underscore-plus":"^1.6.6","glob":"3","minimatch":"0.2","node-uuid":"1.4.7"},"devDependencies":{"eslint":"2.12.0","babel-eslint":"6.0.4","eslint-plugin-babel":"3.2.0"},"providedServices":{"autocomplete.provider":{"versions":{"2.0.0":"provide"}},"linter":{"versions":{"1.0.0":"provideLinter"}}},"keywords":["javascript","autocomplete-plus","autocomplete","node","es6","javascript-2015","jquery","tern"],"readme":"# atom-ternjs\n\n> JavaScript code intelligence for atom with [Tern](https://github.com/ternjs/tern).\nAdds support for ES5, ES6 (JavaScript 2015), Node.js, jQuery, Angular and more. Extendable via plugins.\nUses suggestion provider by [autocomplete-plus](https://github.com/atom/autocomplete-plus).\n\n## Installation\n\nConfigure your project\n* Navigate to Packages -> Atom Ternjs -> Configure project\n* The config view appears.\n* Hit \"Save & Restart Server\" to create/update the .tern-project file\n\n**Configure project doesn't support the plugins-section (yet).\nPlease add plugins manually by editing the .tern-project file as shown below.**\n\n**In order to use third party plugins read the [Third party plugins](#third-party-plugins) section!**\n\n**In order to use third party plugins from within your project's ```node_modules``` read the [Third party plugins local](#third-party-plugins-local) section! This is also an alternative if [Third party plugins](#third-party-plugins) aren't working.**\n\nIf configure project does not work for you\n* In your project root create a file named .tern-project. See docs @ http://ternjs.net/doc/manual.html#configuration.\n* Check path in loadEagerly\n* Restart the server via *Packages -> Atom Ternjs -> Restart server*\n\nExample `.tern-project` file (customize to your own needs):\n```json\n{\n  \"ecmaVersion\": 6,\n  \"libs\": [\n    \"browser\",\n    \"jquery\"\n  ],\n  \"loadEagerly\": [\n    \"path/to/your/js/**/*.js\"\n  ],\n  \"dontLoad\": [\n    \"path/to/your/js/**/*.js\"\n  ],\n  \"plugins\": {\n    \"complete_strings\": {},\n    \"node\": {},\n    \"lint\": {},\n    \"angular\": {},\n    \"requirejs\": {},\n    \"modules\": {},\n    \"es_modules\": {},\n    \"doc_comment\": {\n      \"fullDocs\": true\n    }\n  }\n}\n```\n\n### Keybindings\nList of [keybindings](#features).\nTo use your own keybindings goto `atom-ternjs` package settings and disable keybindings.\n\n### EcmaVersion\n* 5: use ECMAScript5\n* 6: use ECMAScript6 (default)\n\n### Libs\n* browser: completion for vanilla js (optional)\n* jquery: completion for jQuery (optional)\n\n### Options\n* loadEagerly: provide the path to your projects js. For relative paths do not use `./` as a prefix. This sometimes leads to an unexpected behaviour.\n* **loadEagerly is expensive. Do not add paths like `node_modules`.**\n* dontLoad: can be used to prevent Tern from loading certain files. It also takes an array of file names or glob patterns.\n\n### Plugins\n* complete_strings: When enabled, this plugin will gather (short) strings in your code, and completing when inside a string will try to complete to previously seen strings. Takes a single option, maxLength, which controls the maximum length of string values to gather, and defaults to 15. (optional)\n* doc_comment: tern will look for JSDoc-style type declarations. Returns the full comment text instead of the first sentence. (optional)\n* node: NodeJS (optional)\n* lint: <a href=\"https://github.com/angelozerr/tern-lint\">angelozerr/tern-lint</a> is a tern plugin which is able to validate JavaScript files to collect semantic errors. <a href=\"https://github.com/AtomLinter/Linter\">Linter</a> is used to display these errors and warnings (optional)\n* angular: AngularJS (optional)\n* requirejs: RequireJS (optional, understand RequireJS-style dependency management)\n* modules: This is a supporting plugin to act as a dependency for other module-loading and module-resolving plugins. (optional, required by es_modules)\n* es_modules: Builds on top of the modules plugin to support ECMAScript 6â€™s import and export based module inclusion. (optional, requires modules)\n* For a list of possible plugins goto http://ternjs.net/doc/manual.html#plugins\n\n## Third party plugins\nIn order to use third party plugins (e.g. [tern-node-express](https://github.com/angelozerr/tern-node-express)):\n```\n$ cd ~/.atom/packages/atom-ternjs\n$ npm install tern-node-express\n```\nAdd the plugin to your .tern-project file:\n```json\n{\n  \"ecmaVersion\": 6,\n  \"libs\": [\n    \"browser\"\n  ],\n  \"loadEagerly\": [\n    \"app/**/*.js\"\n  ],\n  \"plugins\": {\n    \"node-express\": {}\n  }\n}\n```\n\nThird party plugins are still an issue and sometimes do not work as expected. This will be fixed in future release.\nRestart the server: *Packages -> Atom Ternjs -> Restart server*\n\n## Third party plugins local\n\nExample for node-express.\nOpen node_modules/tern-node-express/tern-express.js\n\nReplace:\n\n```js\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    return mod(require(\"tern/lib/infer\"), require(\"tern/lib/tern\"));\n  if (typeof define == \"function\" && define.amd) // AMD\n    return define([ \"tern/lib/infer\", \"tern/lib/tern\" ], mod);\n  mod(tern, tern);\n}...\n```\n\nWith\n\n```js\n(function(mod) {\n  return mod(process.__infer, process.__tern);\n}...\n\n```\n\nRestart Atom.\n\n## .tern-project created/modified\n* After the file was created or has been modified, restart the server via *Packages -> Atom Ternjs -> Restart server*\n\n## Features\n* Completion (autocompletion triggers automatically), or via the keybindings:\n  * <kbd>strg+space</kbd>\n  * <kbd>ctrl+alt+space</kbd> (force autocompletion in any context)\n\n![atom-ternjs](http://www.tobias-schubert.com/github/completion-1.png)\n\n![atom-ternjs](http://www.tobias-schubert.com/github/completion-2.png)\n* Find references (set your cursor position to one of variable, function or instance -> open context-menu and trigger \"Find references\" or use the keybindings:\n  * <kbd>ctrl+shift+r</kbd> (mac, windows)\n  * <kbd>ctrl+alt+shift+e</kbd> (linux)\n\nClick any item in the generated reference-list and navigate directly to file and position\n\n![atom-ternjs](http://www.tobias-schubert.com/github/reference-1.png)\n\n* Documentation\n  * Show documentation for the thing under the cursor via <kbd>alt+o</kbd> (mac, windows, linux)\n  ![atom-ternjs](http://www.tobias-schubert.com/github/docs.png)\n  * Also displayed if a suggestion with a valid documentation is selected in the autocomplete-plus select-list\n\n* Find definition (set your cursor position to one of variable, function or instance -> open context-menu and trigger \"Find definition\") or use the keybindings:\n  * <kbd>alt+click</kbd> (mac, windows, linux)\n  * <kbd>ctrl+alt+d</kbd> (mac, windows)\n  * <kbd>ctrl+alt+shift+d</kbd> (linux)\n\n* Back from definition\n  * <kbd>ctrl+alt+z</kbd> (mac, windows)\n  * <kbd>ctrl+alt+shift+z</kbd> (linux)\n\n* Rename variable (set your cursor position to a variable -> open context-menu and trigger \"Rename\") or use the keybindings:\n  * <kbd>ctrl+alt+c</kbd> (mac, windows)\n  * <kbd>ctrl+alt+shift+c</kbd> (linux)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/tststs/atom-ternjs/issues"},"homepage":"https://github.com/tststs/atom-ternjs#readme","_id":"atom-ternjs@0.14.2","_shasum":"cf7c15e1e66868c6c2446b53c473de2c0b5dd1c6","_resolved":"file:../d-116619-3126-fknyvi/package.tgz","_from":"../d-116619-3126-fknyvi/package.tgz"}