{"_id":"pretty-format","_rev":"143-c1d9617730a79d05358eda46c7e4a400","name":"pretty-format","description":"Stringify any JavaScript value.","dist-tags":{"latest":"23.0.1","test":"21.3.0-beta.15","beta":"23.0.0-charlie.4"},"versions":{"1.0.0":{"name":"pretty-format","version":"1.0.0","description":"Stringify any JavaScript value.","main":"dist/pretty-format.js","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"author":{"name":"James Kyle","email":"me@thejameskyle.com"},"license":"MIT","bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"dependencies":{"lodash":"^3.4.0"},"gitHead":"f5033177cce46717f1883ca3bfb17a2c39b495a1","_id":"pretty-format@1.0.0","_shasum":"ce2aa8e552a93cb0d20f23c625313a843d657a77","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}],"dist":{"shasum":"ce2aa8e552a93cb0d20f23c625313a843d657a77","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-1.0.0.tgz"},"directories":{}},"1.1.0":{"name":"pretty-format","version":"1.1.0","description":"Stringify any JavaScript value.","main":"dist/pretty-format.js","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"author":{"name":"James Kyle","email":"me@thejameskyle.com"},"license":"MIT","bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"dependencies":{"lodash":"^3.4.0"},"gitHead":"57e24007ae9e526a847e1627ef9119bd983667ae","_id":"pretty-format@1.1.0","_shasum":"dafccca3f9922601c2090b411e312e88fd705262","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}],"dist":{"shasum":"dafccca3f9922601c2090b411e312e88fd705262","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-1.1.0.tgz"},"directories":{}},"1.1.1":{"name":"pretty-format","version":"1.1.1","description":"Stringify any JavaScript value.","main":"dist/pretty-format.js","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"author":{"name":"James Kyle","email":"me@thejameskyle.com"},"license":"MIT","bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"dependencies":{"lodash":"^3.4.0"},"gitHead":"1f3cac5be4c339af4297f9b97e48a9e1c8307370","_id":"pretty-format@1.1.1","_shasum":"19235bc0abcb1926ea461c6e2584d9ff49ab126e","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}],"dist":{"shasum":"19235bc0abcb1926ea461c6e2584d9ff49ab126e","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-1.1.1.tgz"},"directories":{}},"1.2.0":{"name":"pretty-format","version":"1.2.0","description":"Stringify any JavaScript value.","main":"dist/pretty-format.js","scripts":{"test":"gulp","test-browser":"gulp test-browser","build":"gulp build","coverage":"gulp coverage"},"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"keywords":["boilerplate","es6","node","starter","kit","transpile","6to5","babel"],"author":{"name":"James Kyle","email":"me@thejameskyle.com"},"license":"MIT","bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","devDependencies":{"babel":"^4.3.0","babelify":"^5.0.3","browserify":"^8.1.1","chai":"^2.0.0","del":"^1.1.1","esperanto":"^0.6.7","glob":"^4.3.5","gulp":"^3.8.10","gulp-babel":"^4.0.0","gulp-file":"^0.2.0","gulp-filter":"^2.0.0","gulp-istanbul":"^0.6.0","gulp-jscs":"^1.4.0","gulp-jshint":"^1.9.0","gulp-livereload":"^3.4.0","gulp-load-plugins":"^0.8.0","gulp-mocha":"^2.0.0","gulp-notify":"^2.1.0","gulp-plumber":"^0.6.6","gulp-rename":"^1.2.0","gulp-sourcemaps":"^1.3.0","gulp-uglifyjs":"^0.6.0","isparta":"^2.2.0","jshint-stylish":"^1.0.0","mkdirp":"^0.5.0","mocha":"^2.1.0","run-sequence":"^1.0.2","sinon":"^1.12.2","sinon-chai":"^2.7.0","vinyl-source-stream":"^1.0.0"},"babelBoilerplateOptions":{"entryFileName":"pretty-format","exportVarName":"PrettyFormat","mochaGlobals":["stub","spy","expect"]},"dependencies":{"lodash":"^3.4.0"},"gitHead":"554b33cc08b0048d41db88dc0440974afebce5fa","_id":"pretty-format@1.2.0","_shasum":"69376de6b777da76ed273f7ed5d76289f115cdb9","_from":".","_npmVersion":"2.3.0","_nodeVersion":"0.10.36","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"maintainers":[{"name":"thejameskyle","email":"me@thejameskyle.com"}],"dist":{"shasum":"69376de6b777da76ed273f7ed5d76289f115cdb9","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-1.2.0.tgz"},"directories":{}},"2.0.0":{"name":"pretty-format","version":"2.0.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"mocha test.js"},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"37d2b08cf05dba367d026d5921e3e6f4505689de","_id":"pretty-format@2.0.0","_shasum":"040492380331ffffccd75e153dac72dbcc7ec378","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"040492380331ffffccd75e153dac72dbcc7ec378","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-2.0.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-2.0.0.tgz_1464818545698_0.25608914671465755"},"directories":{}},"2.1.0":{"name":"pretty-format","version":"2.1.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"mocha test.js"},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"06b0943f6b43c685c8a3153e372f20d894ca0e69","_id":"pretty-format@2.1.0","_shasum":"476ffab78d55d8c43474b999bfa817e345d117c3","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"476ffab78d55d8c43474b999bfa817e345d117c3","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-2.1.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-2.1.0.tgz_1464825138448_0.10198654420673847"},"directories":{}},"3.0.0":{"name":"pretty-format","version":"3.0.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"mocha test.js"},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"247edd4f36664cd60407a310d4ca835218034cb8","_id":"pretty-format@3.0.0","_shasum":"52db9fe7e9e6393b0387a218ebc085d99fe7d160","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"52db9fe7e9e6393b0387a218ebc085d99fe7d160","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.0.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.0.0.tgz_1465850033484_0.756478788331151"},"directories":{}},"3.1.0":{"name":"pretty-format","version":"3.1.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"mocha test.js"},"devDependencies":{"mocha":"^2.1.0"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"bc0c4d481a51204724019a526c9164eaa48817ed","_id":"pretty-format@3.1.0","_shasum":"1fc982197f0e8da0dae57da0cb65cd03db25f20e","_from":".","_npmVersion":"2.14.9","_nodeVersion":"0.12.9","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"1fc982197f0e8da0dae57da0cb65cd03db25f20e","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.1.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.1.0.tgz_1465878718616_0.28907121275551617"},"directories":{}},"3.2.0":{"name":"pretty-format","version":"3.2.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"mocha test.js test-plugins-ReactTestComponent.js"},"devDependencies":{"mocha":"^2.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"9254efec454215c5c2c1789b0c679c9b8d0b14ec","_id":"pretty-format@3.2.0","_shasum":"30ba2f8ded37451af53d632fee1fe34b660a285f","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"30ba2f8ded37451af53d632fee1fe34b660a285f","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.2.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.2.0.tgz_1465961024482_0.2189729092642665"},"directories":{}},"3.3.0":{"name":"pretty-format","version":"3.3.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"mocha test.js"},"devDependencies":{"mocha":"^2.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"e39d00679d4e5e43f23d8a7ef29f2d5c844ec46a","_id":"pretty-format@3.3.0","_shasum":"1dd02939d41bc88fa01b0b7e76bb39562f37ba01","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"1dd02939d41bc88fa01b0b7e76bb39562f37ba01","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.3.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.3.0.tgz_1465972283646_0.32496382878161967"},"directories":{}},"3.3.1":{"name":"pretty-format","version":"3.3.1","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"jest":"^12.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"ede3ded058074a8176512d31891b8999bc9b7ea5","_id":"pretty-format@3.3.1","_shasum":"54c1d4a7e705382017837d51916d8ec6662e4726","_from":".","_npmVersion":"3.8.3","_nodeVersion":"5.10.1","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"54c1d4a7e705382017837d51916d8ec6662e4726","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.3.1.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.3.1.tgz_1466530860016_0.6480775438249111"},"directories":{}},"3.3.2":{"name":"pretty-format","version":"3.3.2","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"jest":"^12.1.0","react":"15.2.0-rc.1"},"dependencies":{"lodash":"^4.13.1"},"gitHead":"457b319dcf7ab6b2455820ffd6896b70d0d5e475","_id":"pretty-format@3.3.2","_shasum":"1643a3030cb27e6c73280d9dc9602dc203daf9bf","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"1643a3030cb27e6c73280d9dc9602dc203daf9bf","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.3.2.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.3.2.tgz_1466630764906_0.5482108551077545"},"directories":{}},"3.4.0":{"name":"pretty-format","version":"3.4.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"gitHead":"12988cafd9b8dce7c58cc47491f08fedbafae658","_id":"pretty-format@3.4.0","_shasum":"81f5266888e6d51515c8d6728228cb50bf9730e8","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"81f5266888e6d51515c8d6728228cb50bf9730e8","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.4.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.0.tgz_1467492135459_0.17039876943454146"},"directories":{}},"3.4.1":{"name":"pretty-format","version":"3.4.1","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"gitHead":"a8de0a5fc54bd9014f66d7a51c2ec5b63fb4a101","_id":"pretty-format@3.4.1","_shasum":"e0a39a07407c6f8c38b07cbfee2df9907939c7f8","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"e0a39a07407c6f8c38b07cbfee2df9907939c7f8","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.4.1.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.1.tgz_1467654558509_0.23463946976698935"},"directories":{}},"3.4.2":{"name":"pretty-format","version":"3.4.2","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"gitHead":"06b59f7d1d610f85753908dc5b275e76025d668c","_id":"pretty-format@3.4.2","_shasum":"186dbba514433bac3b3b616f8c806a0d5834ab3f","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"186dbba514433bac3b3b616f8c806a0d5834ab3f","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.4.2.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.2.tgz_1467769452652_0.2976850795093924"},"directories":{}},"3.4.3":{"name":"pretty-format","version":"3.4.3","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^12.1.0","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"gitHead":"d1f6f577307decbce99bf256274e4f2920df3725","_id":"pretty-format@3.4.3","_shasum":"1f5be6a5c252099a5920d3093fef60845f2286ab","_from":".","_npmVersion":"3.9.5","_nodeVersion":"6.2.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"1f5be6a5c252099a5920d3093fef60845f2286ab","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.4.3.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.4.3.tgz_1467786479000_0.7793948103208095"},"directories":{}},"3.5.0":{"name":"pretty-format","version":"3.5.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^13.2.3","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"gitHead":"38b091e8d1bb50f9ec3435cef6c72bd124859f9c","_id":"pretty-format@3.5.0","_shasum":"1d795f73086faae09df6c40feb1698134df9ba2d","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"1d795f73086faae09df6c40feb1698134df9ba2d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.5.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.0.tgz_1467966560716_0.14394370932132006"},"directories":{}},"3.5.1":{"name":"pretty-format","version":"3.5.1","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^13.2.3","left-pad":"^1.1.0","react":"15.2.0-rc.1"},"gitHead":"8487a02de74e5747bd0a7e8491ed2eef1ed952f9","_id":"pretty-format@3.5.1","_shasum":"a3f5239a15bed8f56c70d313467616771ca26cc0","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"a3f5239a15bed8f56c70d313467616771ca26cc0","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.5.1.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.1.tgz_1470071183130_0.9069960319902748"},"directories":{}},"3.5.2":{"name":"pretty-format","version":"3.5.2","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"ee8df7bead23e719db01719ecc23ed8c71ba1ffc","_id":"pretty-format@3.5.2","_shasum":"e97a0285f076a4ed722406522f9116773d169310","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"e97a0285f076a4ed722406522f9116773d169310","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.5.2.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.2.tgz_1470279216845_0.8327156249433756"},"directories":{}},"3.5.3":{"name":"pretty-format","version":"3.5.3","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"973e169d9d8f7c78758972c68406e5c7ff891276","_id":"pretty-format@3.5.3","_shasum":"539dfe29335c42f18c233dcca23eebcc1d41f1c8","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"539dfe29335c42f18c233dcca23eebcc1d41f1c8","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.5.3.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.5.3.tgz_1470875030957_0.45410665567032993"},"directories":{}},"3.6.0":{"name":"pretty-format","version":"3.6.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"a0c81c42ba2d62e61a5eecbc39c6f5cb475df67d","_id":"pretty-format@3.6.0","_shasum":"c1c06ee737a3281971c89e0f25cc1387ea4d5d80","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"c1c06ee737a3281971c89e0f25cc1387ea4d5d80","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.6.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.6.0.tgz_1471465208714_0.31411029887385666"},"directories":{}},"3.7.0":{"name":"pretty-format","version":"3.7.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"automock":false,"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^14.1.0","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"bc9409fb6d727d42082f2ff87870d7f49723130c","_id":"pretty-format@3.7.0","_shasum":"0bf7f828cafe6e86ffd6c9dd5a707867f35651ab","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.5.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"0bf7f828cafe6e86ffd6c9dd5a707867f35651ab","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.7.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-3.7.0.tgz_1472742965635_0.8393159916158766"},"directories":{}},"3.8.0":{"name":"pretty-format","version":"3.8.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"556f97f5ba896f15bf8e07e191636d31828f63a8","_id":"pretty-format@3.8.0","_shasum":"bfbed56d5e9a776645f4b1ff7aa1a3ac4fa3c385","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"bfbed56d5e9a776645f4b1ff7aa1a3ac4fa3c385","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-3.8.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-3.8.0.tgz_1473558204046_0.3871619531419128"},"directories":{}},"4.0.0":{"name":"pretty-format","version":"4.0.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"9b2e2f48d564a67848c72bf42160938867366c18","_id":"pretty-format@4.0.0","_shasum":"eef0236ad1672ee5d6f36629d3e9e2454d01266c","_from":".","_npmVersion":"3.8.6","_nodeVersion":"5.12.0","_npmUser":{"name":"thejameskyle","email":"me@thejameskyle.com"},"dist":{"shasum":"eef0236ad1672ee5d6f36629d3e9e2454d01266c","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.0.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.0.0.tgz_1473559349051_0.9919021637178957"},"directories":{}},"4.1.0":{"name":"pretty-format","version":"4.1.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"d03f38d418dbe342a0f9f8e8e787b50f3c2317dc","_id":"pretty-format@4.1.0","_shasum":"fcd582438146d039a93a670fc18c72aa71325577","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.6.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"fcd582438146d039a93a670fc18c72aa71325577","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.1.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.1.0.tgz_1474370567756_0.6978352644946426"},"directories":{}},"4.2.0":{"name":"pretty-format","version":"4.2.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"a870fef3ddcfb0fc77b84e391dcbeebfa02e19f5","_id":"pretty-format@4.2.0","_shasum":"6e2adb73eb423cbcc52077705d68c7504332013b","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.6.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"6e2adb73eb423cbcc52077705d68c7504332013b","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.2.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.0.tgz_1474431819370_0.05452787992544472"},"directories":{}},"4.2.1":{"name":"pretty-format","version":"4.2.1","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"03fe50978332e63fb6b1107cf86d7744561dd22e","_id":"pretty-format@4.2.1","_shasum":"b1dad18c3be0c8209e64c7791fa67e252d2d3e07","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.6.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"b1dad18c3be0c8209e64c7791fa67e252d2d3e07","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.2.1.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.1.tgz_1474439807179_0.30846197600476444"},"directories":{}},"4.2.2":{"name":"pretty-format","version":"4.2.2","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"e593df850acd3a8087e3eb5fc46f66e7c93c3426","_id":"pretty-format@4.2.2","_shasum":"f80bf8d98a6f4d20997a51d18bf331f2ad789a64","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"f80bf8d98a6f4d20997a51d18bf331f2ad789a64","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.2.2.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.2.tgz_1478041303477_0.29300490533933043"},"directories":{}},"4.2.3":{"name":"pretty-format","version":"4.2.3","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"ef22c76692bae5e111cd7432b3dd694f5c4d0f12","_id":"pretty-format@4.2.3","_shasum":"8894c2ac81419cf801629d8f66320a25380d8b05","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"8894c2ac81419cf801629d8f66320a25380d8b05","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.2.3.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.2.3.tgz_1478801682352_0.8379785239230841"},"directories":{}},"4.3.0":{"name":"pretty-format","version":"4.3.0","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"8e3c166225d556a49e835db7919a346fd0a0cb11","_id":"pretty-format@4.3.0","_shasum":"67d3de28fd37957ada895b94452ae539396d97c8","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"67d3de28fd37957ada895b94452ae539396d97c8","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.3.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-4.3.0.tgz_1479452901694_0.7598880641162395"},"directories":{}},"4.3.1":{"name":"pretty-format","version":"4.3.1","description":"Stringify any JavaScript value.","license":"MIT","main":"index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"keywords":[],"repository":{"type":"git","url":"git+https://github.com/thejameskyle/pretty-format.git"},"bugs":{"url":"https://github.com/thejameskyle/pretty-format/issues"},"homepage":"https://github.com/thejameskle/pretty-format","scripts":{"test":"jest","perf":"node perf/test.js"},"jest":{"testEnvironment":"node","verbose":true},"devDependencies":{"chalk":"^1.1.3","jest":"^15.1.1","left-pad":"^1.1.1","react":"15.3.0"},"gitHead":"49ae3bab31388b5633c3029203e573f59d59f4a1","_id":"pretty-format@4.3.1","_shasum":"530be5c42b3c05b36414a7a2a4337aa80acd0e8d","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"530be5c42b3c05b36414a7a2a4337aa80acd0e8d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-4.3.1.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-4.3.1.tgz_1479479968899_0.5202373208012432"},"directories":{}},"18.0.0":{"name":"pretty-format","version":"18.0.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"scripts":{"test":"../../packages/jest-cli/bin/jest.js","perf":"node perf/test.js"},"dependencies":{"ansi-styles":"^2.2.1"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@18.0.0","_shasum":"5f45c59fe2ed6749d46765429679670b08b21137","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.2.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"5f45c59fe2ed6749d46765429679670b08b21137","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-18.0.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-18.0.0.tgz_1481801077732_0.5574890447314829"},"directories":{}},"18.1.0":{"name":"pretty-format","version":"18.1.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"scripts":{"test":"../../packages/jest-cli/bin/jest.js","perf":"node perf/test.js"},"dependencies":{"ansi-styles":"^2.2.1"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@18.1.0","_shasum":"fb65a86f7a7f9194963eee91865c1bcf1039e284","_from":".","_npmVersion":"3.10.10","_nodeVersion":"7.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"fb65a86f7a7f9194963eee91865c1bcf1039e284","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-18.1.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-18.1.0.tgz_1482976055665_0.7535617861431092"},"directories":{}},"18.5.0-alpha.7da3df39":{"name":"pretty-format","version":"18.5.0-alpha.7da3df39","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@18.5.0-alpha.7da3df39","scripts":{},"_shasum":"e990895d97195b0ff0cbd7d1dd8d8e179be43ce3","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.5.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"e990895d97195b0ff0cbd7d1dd8d8e179be43ce3","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-18.5.0-alpha.7da3df39.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-18.5.0-alpha.7da3df39.tgz_1487350677326_0.2225903368089348"},"directories":{}},"19.0.0":{"name":"pretty-format","version":"19.0.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@19.0.0","scripts":{},"_shasum":"56530d32acb98a3fa4851c4e2b9d37b420684c84","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.5.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"56530d32acb98a3fa4851c4e2b9d37b420684c84","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-19.0.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"thejameskyle","email":"me@thejameskyle.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-19.0.0.tgz_1487669430940_0.7767606938723475"},"directories":{}},"19.1.0-alpha.eed82034":{"name":"pretty-format","version":"19.1.0-alpha.eed82034","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@19.1.0-alpha.eed82034","scripts":{},"_shasum":"970654771b23bb904f7362f814c38c95e339cd1d","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"970654771b23bb904f7362f814c38c95e339cd1d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-19.1.0-alpha.eed82034.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-19.1.0-alpha.eed82034.tgz_1489711281837_0.8856345196254551"},"directories":{}},"19.2.0-alpha.993e64af":{"name":"pretty-format","version":"19.2.0-alpha.993e64af","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@19.2.0-alpha.993e64af","scripts":{},"_shasum":"e15683e06787f4656ccc5e6f850928a9dcd9e032","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"e15683e06787f4656ccc5e6f850928a9dcd9e032","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-19.2.0-alpha.993e64af.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-19.2.0-alpha.993e64af.tgz_1493912259929_0.5100777607876807"},"directories":{}},"19.3.0-alpha.85402254":{"name":"pretty-format","version":"19.3.0-alpha.85402254","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@19.3.0-alpha.85402254","scripts":{},"_shasum":"e0cdbd5b0bd06242dc2c00434bed3f9124e6f108","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"e0cdbd5b0bd06242dc2c00434bed3f9124e6f108","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-19.3.0-alpha.85402254.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-19.3.0-alpha.85402254.tgz_1493984901988_0.14289735327474773"},"directories":{}},"20.0.0":{"name":"pretty-format","version":"20.0.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.0.0","scripts":{},"_shasum":"bd100f330e707e4f49fef3f234d6e915242a6e7e","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"bd100f330e707e4f49fef3f234d6e915242a6e7e","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.0.0.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.0.tgz_1494073956310_0.3826066949404776"},"directories":{}},"20.0.1":{"name":"pretty-format","version":"20.0.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.0.1","scripts":{},"_shasum":"ba95329771907c189643dd251e244061ff642350","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.9.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"ba95329771907c189643dd251e244061ff642350","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.0.1.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.1.tgz_1494499807965_0.6633350073825568"},"directories":{}},"20.0.2":{"name":"pretty-format","version":"20.0.2","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.0.2","scripts":{},"_shasum":"91831cb1d8fbedb783b58a1e3fcdf88c1bd7cfd1","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"91831cb1d8fbedb783b58a1e3fcdf88c1bd7cfd1","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.0.2.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.2.tgz_1495018221751_0.7365539520978928"},"directories":{}},"20.0.3":{"name":"pretty-format","version":"20.0.3","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.0.3","scripts":{},"_shasum":"020e350a560a1fe1a98dc3beb6ccffb386de8b14","_from":".","_npmVersion":"4.2.0","_nodeVersion":"7.10.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"shasum":"020e350a560a1fe1a98dc3beb6ccffb386de8b14","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.0.3.tgz"},"maintainers":[{"name":"cpojer","email":"christoph.pojer@gmail.com"},{"name":"dmitriiabramov","email":"dmitrii@rheia.us"},{"name":"fb","email":"opensource+npm@fb.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/pretty-format-20.0.3.tgz_1495018631891_0.5346766302827746"},"directories":{}},"20.1.0-alpha.1":{"name":"pretty-format","version":"20.1.0-alpha.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-alpha.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-Esjgh3MaR0OUFG+rbIjRabqpuUoS/cERoZcOiXdaemjhiaUfjahtXq0IPNNsUuD6A2n4RB51EBnWMcJnJ1oOnw==","shasum":"51092a6e850b27d0f9e94b03ad71350145dda215","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-alpha.1.tgz"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-alpha.1.tgz_1498644980434_0.827074789442122"},"directories":{}},"20.1.0-alpha.2":{"name":"pretty-format","version":"20.1.0-alpha.2","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-alpha.2","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-E8LQAfbHl2M3r06bu0+iGfo0BRFSDObmYAnoadCqJ1D6D/gZzAnGBTog897TkvmkMx9/mOzqA3paOjKTju+xEQ==","shasum":"f6c08b56fee1d84936a18fea2edd1e1a03faaa5a","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-alpha.2.tgz"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-alpha.2.tgz_1498754206978_0.7984285997226834"},"directories":{}},"20.1.0-alpha.3":{"name":"pretty-format","version":"20.1.0-alpha.3","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^2.1.1","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-alpha.3","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-cNkYnwAvdpzPhU6eR3xxM3x/5WX0xy1w99Zv9KlZYsC0zzkFnghm3C2Y+SdfH2i2hHKmJyuXjL36IFwfkEP08g==","shasum":"ea1dd3874bc638c5d6237528ca2f6a087923257d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-alpha.3.tgz"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-alpha.3.tgz_1498832453553_0.9796057401690632"},"directories":{}},"20.1.0-beta.1":{"name":"pretty-format","version":"20.1.0-beta.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-beta.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-TQcPA1tPty01GSzrumH0v/+DWHlhn3wHkvQgArec1UWmEhsBDpzr2Tw6DVZ5LQ2Zdm1+vqh3vwn/mZ+HJL2dFQ==","shasum":"4c8dbd96fde7b61b965e311af142a60235ecf72a","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-beta.1.tgz"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-beta.1.tgz_1499942021825_0.3699762055184692"},"directories":{}},"20.1.0-chi.1":{"name":"pretty-format","version":"20.1.0-chi.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-chi.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-HX/SOY4KwKk78KrCs9oTpEmcZDf6BnDoTwM4fG2kQSfKhUB0G9dP2p/WdLxbjye8DvXU2oR9d1la+d1eKdRmiA==","shasum":"36439fb4ca2bb68e76a0d965170a354e7b2bfc99","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-chi.1.tgz"},"maintainers":[{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-chi.1.tgz_1500027904420_0.6980449620168656"},"directories":{}},"20.1.0-delta.1":{"name":"pretty-format","version":"20.1.0-delta.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-delta.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-1iTpD1bzISgDgyQy9vVUsCQE9yceKEDyBNetu+lnq7L/ciQoAJY4XYNO8rh0nQoRBHyQdmaF9behAYN39dxzpA==","shasum":"f1d31d80b5bd8724b33f3065acb1457710213d0d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-delta.1.tgz"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.1.tgz_1500367613994_0.9472515909001231"},"directories":{}},"20.1.0-delta.2":{"name":"pretty-format","version":"20.1.0-delta.2","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-delta.2","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-DUKhIiDpLFWl8a88CXjIad2hpz8GWQ/ifF4werLE30QETdOa0Y9DyJYjwO3nlRbcwBhWy2r3fqLczDr8vdZgRg==","shasum":"b30fb1f421158115db5c2561aee3e0932058b4cf","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-delta.2.tgz"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.2.tgz_1500469003591_0.6975763365626335"},"directories":{}},"20.1.0-delta.3":{"name":"pretty-format","version":"20.1.0-delta.3","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-delta.3","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-oPg69E6gYphXZtbP3MUWF8AdBVxgRpay7+aZuXSd4wfktTY0eAbTA+KxS6aWb2vzLJZjoFzIZn3yoSkb+xoOew==","shasum":"1f84f5ba81dc2d9670aa629e87369650da3bdf62","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-delta.3.tgz"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.3.tgz_1501020745661_0.15517720603384078"},"directories":{}},"20.1.0-delta.4":{"name":"pretty-format","version":"20.1.0-delta.4","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-delta.4","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-kIYNcMwJ1O2vX04ojQOQ/w3YcJLDqkUmGnxZUwulYTlDq2lYVqPobc3+Mvaj8T/eNIklhQM6hwcHcawOdE89iA==","shasum":"4867b8e91e1eb7a97b2b02bd46bf9829f6fe1c89","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-delta.4.tgz"},"maintainers":[{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.4.tgz_1501175948595_0.7395031834021211"},"directories":{}},"20.1.0-delta.5":{"name":"pretty-format","version":"20.1.0-delta.5","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-delta.5","_npmVersion":"5.3.0","_nodeVersion":"8.0.0","_npmUser":{"name":"aaronabramov","email":"aaron@abramov.io"},"dist":{"integrity":"sha512-aIFTNcOiazeXsqjPB534cDBM8unE4veDalZ2dS7BOxHpFVmz4vz1uIKZqO/Yo4bDcZelfk4aa22mTyuApX8R4w==","shasum":"7a45a00938192cb306606b04c84a885a1501e0ff","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-delta.5.tgz"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-delta.5.tgz_1501605216720_0.6961817897390574"},"directories":{}},"20.1.0-echo.1":{"name":"pretty-format","version":"20.1.0-echo.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@20.1.0-echo.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-0xv3lhkXb7xtQmha53cSrjl4MVd6Ymj0QJrWWcoK2JEnvSHTYMCLOdzkDi2rXw7Ex+p0DqeBEzM1+ZDksdYItA==","shasum":"3b97907461d90a06b2e7531185cb1b529eb186f3","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-20.1.0-echo.1.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-20.1.0-echo.1.tgz_1502210993548_0.23874914622865617"},"directories":{}},"21.0.0-alpha.1":{"name":"pretty-format","version":"21.0.0-alpha.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.0.0-alpha.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-Fv3tbErGJ3XxYAVM5OnhGirsOvugIKJ8TYSjyJPT4B8epkenbJkweWHUClT5VRReJ6n5gPzNpi+lZHzPlrab/w==","shasum":"ce06c788260803f557e569d0e2a526510375df34","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.0.0-alpha.1.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0-alpha.1.tgz_1502446445030_0.3482506617438048"},"directories":{}},"21.0.0-alpha.2":{"name":"pretty-format","version":"21.0.0-alpha.2","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.0.0-alpha.2","_npmVersion":"5.3.0","_nodeVersion":"8.0.0","_npmUser":{"name":"aaronabramov","email":"aaron@abramov.io"},"dist":{"integrity":"sha512-7gc3fKT7HLAyoRleN4VOgqsLwArExCZ8DaiXkWK5xkX40nTZ9icZGduKDNuGMNlTva7rKuz0qqA2sxBtTvq8aQ==","shasum":"0122a9d5f73b9895ee9ba5954aeb817fb988f9c3","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.0.0-alpha.2.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0-alpha.2.tgz_1503353208575_0.771268846001476"},"directories":{}},"21.0.0-beta.1":{"name":"pretty-format","version":"21.0.0-beta.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.0.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.0.0-beta.1","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-EVmydIhn2zDLhoCPKU5cCvKHBRp+gxHsWrt4U0YLv8vLGk97/TOv1bvV7oHlo3d7KI6gMgf3Czhusm8M5DGFhQ==","shasum":"53fb4572e1ab46b44cad62fd91863f4cd9d40225","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.0.0-beta.1.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0-beta.1.tgz_1503610009937_0.9285495886579156"},"directories":{}},"21.0.0":{"name":"pretty-format","version":"21.0.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.0.0","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-xICDS0AgbFdP8RNDxi58hOWfm7CDjC88PPx49PA8GmBs6WBwWEMLRT6lU0mtX9snTBBMncQxDNs4rMloCjZwuA==","shasum":"bea1522c4c47e49b44db5b6fbf83e7737251f305","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.0.0.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.0.tgz_1504537314379_0.43319351389072835"},"directories":{}},"21.0.2":{"name":"pretty-format","version":"21.0.2","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.0.2","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-+fjqIZo/KcMEreY5onowgXzENgd6zKxJS9BoiIoOeRmXTM0Fo6Er0RUbIjzLyY2TBV1K2S7vDUzOVcUtKE9jgQ==","shasum":"76adcebd836c41ccd2e6b626e70f63050d2a3534","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.0.2.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.0.2.tgz_1504880367068_0.5469620125368237"},"directories":{}},"21.1.0":{"name":"pretty-format","version":"21.1.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"BSD-3-Clause","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.1.0","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-041BVxr2pp7uGG8slfw43ysRXSaBIVqo5Li03BwI3K1/9oENlhkEEYWPkHpDzj7NlJ3GZte+Tv/DId5g2PLduA==","shasum":"557428254323832ee8b7c971cb613442bea67f61","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.1.0.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.1.0.tgz_1505353814511_0.45887886406853795"},"directories":{}},"21.2.0":{"name":"pretty-format","version":"21.2.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.2.0","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-r0Ec8aBODhkhwpbw83uQ3dh5l982BRjwDDT2bsY3s9nfeaFvWlOh/hWg81Z4qJX1OwkJBmZqw2Mhk8sWXarx6A==","shasum":"8ca29556ad13eed5db48a3096b98bab9c321c6fa","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.2.0.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.2.0.tgz_1506457337974_0.018551710061728954"},"directories":{}},"21.2.1":{"name":"pretty-format","version":"21.2.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.2.1","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-ZdWPGYAnYfcVP8yKA3zFjCn8s4/17TeYH28MXuC8vTp0o21eXjbFGcOAXZEaDaOFJjc3h2qa7HQNHNshhvoh2A==","shasum":"ae5407f3cf21066cd011aa1ba5fce7b6a2eddb36","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.2.1.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.2.1.tgz_1506550502084_0.2247674383688718"},"directories":{}},"21.3.0-alpha.1e3ee68e":{"name":"pretty-format","version":"21.3.0-alpha.1e3ee68e","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-alpha.1e3ee68e","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-Yy//p7NR7KKeVzoPEqx6hgQAK9cvLRuWSHHcq+va1fapfgN0EvrU8+Bh6kOIxOtbf8pM9/sP0sh9sDmCSwM25w==","shasum":"a3bad57fa8925ca2e7b5fe66454ac3d30371a314","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-alpha.1e3ee68e.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-alpha.1e3ee68e.tgz_1506608440405_0.08250383823178709"},"directories":{}},"21.3.0-alpha.eff7a1cf":{"name":"pretty-format","version":"21.3.0-alpha.eff7a1cf","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-alpha.eff7a1cf","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-t5+JnrK2LQGOKoZCtDajQzz1XNsc1ZZ1clOWqfg75RXZ7JAIwEP8OxJa/YqyWcatJ0tpLQdk9Pso+fyDsQMabQ==","shasum":"c8d2648ce88753abcdfaa407b555b853db796068","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-alpha.eff7a1cf.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-alpha.eff7a1cf.tgz_1506876408988_0.26944437134079635"},"directories":{}},"21.3.0-beta.1":{"name":"pretty-format","version":"21.3.0-beta.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.1","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-hhGC6GaSgmXvb/WR1HUOsVOx3zZbPlwjiJ73OoIQZeMSiMoJvigr4QbyWX4WasRw2kJuMmdzSsTl573Fsa5Mog==","shasum":"0525f192e6722eae942a9ecb93eab7ef4faa2440","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.1.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.1.tgz_1507114118268_0.1342497942969203"},"directories":{}},"21.3.0-beta.2":{"name":"pretty-format","version":"21.3.0-beta.2","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.2","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-U4RrCjvNm+u2VV+3xxeLAORBtXo1yUqccfkclKgU05sT6djh/L2B+Xz2WwXgqp1W5LcKawdrVav5InovYwnATQ==","shasum":"781840c8d10bc37c4438c61ab50678917a9f8a7d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.2.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.2.tgz_1507888445329_0.3785671025980264"},"directories":{}},"21.3.0-beta.3":{"name":"pretty-format","version":"21.3.0-beta.3","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.3","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-GWHJ+1T4WGd0n07XtnAPBX9cJrDe4lDwApFERWbgmJEBZLqOAb2aRMRCWw3lx0YJ4rJUTJQspzykUi17bXMvrw==","shasum":"f52e763ef855a5e0b093fc4af201592e896512f9","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.3.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.3.tgz_1508960044838_0.6422023139894009"},"directories":{}},"21.3.0-beta.4":{"name":"pretty-format","version":"21.3.0-beta.4","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.4","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-0N/mF0q7xrvqYiVH70Jx6gs6PSd7wgEFwXvZeNfJCZvNqanI0ziubX4b29ZxqLD7EDYWInhrFIVPy+PS7BeP5Q==","shasum":"6b3b8aba0b7097f821156e5fd1e3bc0fa923b17f","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.4.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.4.tgz_1509024417918_0.15134358499199152"},"directories":{}},"21.3.0-beta.5":{"name":"pretty-format","version":"21.3.0-beta.5","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.5","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-RJsSz0OezKVzE11v6XawL4bKSf/Ot8/emu2MniJCmVXyGZ/qAecQ9YjtY8IqMJkLN/GBvDb+4cZvwdwaLrcGSA==","shasum":"7293f1b7cd5af9e4d451d3fce2d9edf37be1225a","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.5.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.5.tgz_1509628650932_0.5733425945509225"},"directories":{}},"21.3.0-beta.6":{"name":"pretty-format","version":"21.3.0-beta.6","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.6","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-Izb3jeV4i6KVY0B5ioD1raEI4KLGO0IMJZuAk6LGNU+Y2Nih5L5Fyj034uajMG4HIYXUMwjZPjlGbhJdkQA0+Q==","shasum":"9e7124609ce93e236214032f812d01fd87dffdac","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.6.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.6.tgz_1509726094359_0.6912878968287259"},"directories":{}},"21.3.0-beta.7":{"name":"pretty-format","version":"21.3.0-beta.7","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.7","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-GUxhDwEMPB7P2Y6IzPhHqUHy2eFz7JcNO8Vc3GHWXBHGLJALMLS0x7q65heedUQfP8lxAULBcFYwLm37MT3XGw==","shasum":"5cd0599fc79e89ac4d5f639d9d7aeb83cfa85d11","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.7.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.7.tgz_1509961188645_0.923250918276608"},"directories":{}},"21.3.0-beta.8":{"name":"pretty-format","version":"21.3.0-beta.8","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.8","_npmVersion":"5.3.0","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-2GJqwkxJtofmptZumdQHWlAduMBeEMpLy2NM6HvicgI9PtVHzgsObRuRfufMD709LB7UryI2F5xpIyziW+9vjg==","shasum":"66cb61c4658c2ecab21251495d6d6c102a25b4ba","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.8.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.8.tgz_1510076622582_0.9108345645945519"},"directories":{}},"21.3.0-beta.9":{"name":"pretty-format","version":"21.3.0-beta.9","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.9","_npmVersion":"5.5.1","_nodeVersion":"8.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-2g5xelJnG75jAdtzBGwUwL0rQz4wIetbZRKSXeUdqxM3zFUv085Ql0O4Arx5y3YGi0LFQQkPDT9SWsWhE+Kdhg==","shasum":"dedd97b728c818f8e9c8818fc4c35c156cae01a5","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.9.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.9.tgz_1511356652309_0.2100884655956179"},"directories":{}},"21.3.0-beta.10":{"name":"pretty-format","version":"21.3.0-beta.10","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.10","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-vTwmiTua5avxqAgGoHft8z1mxmx0UDf6+JYr4YSrnhEzquN/tkr7+igq3axXBrbc9LqUNayRgBSWgW/kpNRBmw==","shasum":"6899d96e7b41420cdae15813f5695969e211b5bc","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.10.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.10.tgz_1511613564251_0.8827821186278015"},"directories":{}},"21.3.0-beta.11":{"name":"pretty-format","version":"21.3.0-beta.11","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.11","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-0Cic2qmU/Q4OnAN6m3rYt2WZIpdFtEgvdA+6bBtporuz29q6bZBlqfIV5oNJ/JLGFvAwecWlUYkrX3fSuozvsw==","shasum":"3a32f4b33b868e20f73018de91a27cc2764643f4","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.11.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.11.tgz_1511965880572_0.03304202784784138"},"directories":{}},"21.3.0-beta.12":{"name":"pretty-format","version":"21.3.0-beta.12","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.12","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-VF7P/DdKFSvZtjyePORUmhMj9ZAjrTJmZattz6WTB8XHvbY8nuI6tqc0jtdIWjVr8xu3raNej+DySiDfIlO/Fw==","shasum":"fc74dd91aa8a0af1667abd705d59fa31b9295616","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.12.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.12.tgz_1512499714975_0.8375277179293334"},"directories":{}},"21.3.0-beta.13":{"name":"pretty-format","version":"21.3.0-beta.13","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.13","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-Yj7N6BYJkQQdVeKtQXN4ATHoMzyCFmr5par/QsujXjm1e49EzDzm4/7zYxrR4AvyuqrTVtfB+kljK82G0PHGOw==","shasum":"e67a45a517de01a119ddb02804cd7232efea34af","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.13.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.13.tgz_1512571028845_0.16150664957240224"},"directories":{}},"21.3.0-beta.14":{"name":"pretty-format","version":"21.3.0-beta.14","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.14","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-yIsEgUDAwqeuJ4MNDIk2vq5ISIsk8YEQEVlGM9LPnKXsZlnkQU+f7taWaPgv+AMOk526j+4CmCm/scCT96KgzA==","shasum":"21ae2e5d29656d54498b7b0ccefda842810eeba5","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.14.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.14.tgz_1513075955153_0.6669253744184971"},"directories":{}},"21.3.0-beta.15":{"name":"pretty-format","version":"21.3.0-beta.15","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@21.3.0-beta.15","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-LO3IWQMOPzBrxk6SxfYtw2O5MVgSlU5iieQ8hmsSAgTpaB0lVaIORZbSaEUSDfxQfFLdE9889+GTFOe03BA7PQ==","shasum":"702708a64be53619b2c10138dc5a594056fd1569","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-21.3.0-beta.15.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-21.3.0-beta.15.tgz_1513344458991_0.48647130909375846"},"directories":{}},"22.0.0":{"name":"pretty-format","version":"22.0.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.0.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-Csm7QFEcmhj9/XtpbHgj7mk7klbCsfsZhZCKNY3FQSoep6eiaBWdPyr+kZAEuYfW0LHBK90uB0mNnYI63uRHcg==","shasum":"3c1da8d100e7e0b0ff1d839f4743b002d5907531","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.0.0.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.0.tgz_1513595004523_0.2027169002685696"},"directories":{}},"22.0.1":{"name":"pretty-format","version":"22.0.1","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.0.1","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-/66A0zEbZUzAH4Xtk3szLp9LERQtq25lwrBygaMK4yg+KWKwZOmpAQUMmYr2uA9bqGogoz0Vu9SrUbeV7Tbwxg==","shasum":"65074c3946f544f6cd8445581293f532e0b3761c","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.0.1.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.1.tgz_1513628965104_0.48569458769634366"},"directories":{}},"22.0.2":{"name":"pretty-format","version":"22.0.2","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.0.2","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-QcdCRIF1CpmW9ONgiZGrr+UEIbIGTx1ATbqlVlG2Sr3tlrKnL5FdOJGU0dxHk1rK0pFY2VVUHu/eRl7FfJ6Sag==","shasum":"c8a2fa835682ad259badd8ad70093f69a0704bad","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.0.2.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.2.tgz_1513691584424_0.41861588321626186"},"directories":{}},"22.0.3":{"name":"pretty-format","version":"22.0.3","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.0.3","_npmVersion":"5.6.0","_nodeVersion":"9.2.1","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-qXbDFJ2/Kk3HFIaLdOblbsCKQ09kZu4MKbXB+m/EaqD7PZ/wXe2XcRREmQleMh4wmerxlma6eJTh3nxCXYUmmA==","shasum":"a2bfa59fc33ad24aa4429981bb52524b41ba5dd7","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.0.3.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.3.tgz_1513695534694_0.9589479956775904"},"directories":{}},"22.0.5":{"name":"pretty-format","version":"22.0.5","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.0.5","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-kWls6NjFrwueDmrTq0qtXxDn/fiAica59J+C4lpE6mfeUYeg6gMR/4TH6ahz/Ceqh8O09au8Qe7TYRyDqT8NvQ==","shasum":"8bad3f12b2b84c76fc57a976bde6770eb4043c69","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.0.5.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.5.tgz_1515510592727_0.8857751328032464"},"directories":{}},"22.0.6":{"name":"pretty-format","version":"22.0.6","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.0.6","_npmVersion":"5.6.0","_nodeVersion":"9.3.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-U7vmPaahWJapEjMbqvHK4D0k7Cux2S1qHsXI5UHwdRK4gidtT0fFwFU3nutg3Ho8b7s5ikN0HVYNaHOjpRiY4g==","shasum":"bbb78e38445f263c2d3b9e281f4b844380990720","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.0.6.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.0.6.tgz_1515664005346_0.2216013662982732"},"directories":{}},"22.1.0":{"name":"pretty-format","version":"22.1.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.1.0","_npmVersion":"5.6.0","_nodeVersion":"9.4.0","_npmUser":{"name":"cpojer","email":"christoph.pojer@gmail.com"},"dist":{"integrity":"sha512-0HHR5hCmjDGU4sez3w5zRDAAwn7V0vT4SgPiYPZ1XDm5sT3Icb+Bh+fsOP3+Y3UwPjMr7TbRj+L7eQyMkPAxAw==","shasum":"2277605b40ed4529ae4db51ff62f4be817647914","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.1.0.tgz"},"maintainers":[{"email":"mjesun@hotmail.com","name":"mjesun"},{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format-22.1.0.tgz_1516017435817_0.08602811326272786"},"directories":{}},"22.4.0":{"name":"pretty-format","version":"22.4.0","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.4.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-pvCxP2iODIIk9adXlo4S3GRj0BrJiil68kByAa1PrgG97c1tClh9dLMgp3Z6cHFZrclaABt0UH8PIhwHuFLqYA==","shasum":"237b1f7e1c50ed03bc65c03ccc29d7c8bb7beb94","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.4.0.tgz","fileCount":16,"unpackedSize":433375},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_22.4.0_1519128211238_0.3710352585898531"}},"22.4.3":{"name":"pretty-format","version":"22.4.3","repository":{"type":"git","url":"git+https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"bugs":{"url":"https://github.com/facebook/jest/issues"},"homepage":"https://github.com/facebook/jest#readme","_id":"pretty-format@22.4.3","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"dist":{"integrity":"sha512-S4oT9/sT6MN7/3COoOy+ZJeA92VmOnveLHgrwBE3Z1W5N9S2A1QGNYiE1z75DAENbJrXXUb+OWXhpJcg05QKQQ==","shasum":"f873d780839a9c02e9664c8a082e9ee79eaac16f","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-22.4.3.tgz","fileCount":16,"unpackedSize":428862},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_22.4.3_1521648490562_0.8268179225620371"}},"23.0.0-alpha.2":{"name":"pretty-format","version":"23.0.0-alpha.2","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-alpha.2","dist":{"shasum":"c16ab6df05ae34b94536f9aa193ba642db2f9b3c","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-alpha.2.tgz","fileCount":23,"unpackedSize":427160},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.2_1522060847231_0.13993785091764677"}},"23.0.0-alpha.4":{"name":"pretty-format","version":"23.0.0-alpha.4","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-alpha.4","dist":{"shasum":"50990fdbbdfe353da0c1046d965f3c5c9b98866e","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-alpha.4.tgz","fileCount":23,"unpackedSize":430490},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.4_1522067501793_0.4253621525737654"}},"23.0.0-alpha.5":{"name":"pretty-format","version":"23.0.0-alpha.5","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-alpha.5","dist":{"shasum":"49441032994ce2b1cfa74531c1c9d9a36fe59e90","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-alpha.5.tgz","fileCount":23,"unpackedSize":430762},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.5_1523387900663_0.46189603391715317"}},"23.0.0-alpha.5r":{"name":"pretty-format","version":"23.0.0-alpha.5r","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-alpha.5r","dist":{"shasum":"094d001344ba1857b19c6a943949b879f833202b","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-alpha.5r.tgz","fileCount":23,"unpackedSize":430763},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.5r_1523425969823_0.716644474951514"}},"23.0.0-alpha.6r":{"name":"pretty-format","version":"23.0.0-alpha.6r","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-alpha.6r","dist":{"shasum":"a50d8381a231f8ae231a8255d7e3de7a6c0d2fe5","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-alpha.6r.tgz","fileCount":23,"unpackedSize":430763},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.6r_1523516494617_0.22010912614011202"}},"23.0.0-alpha.7":{"name":"pretty-format","version":"23.0.0-alpha.7","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-alpha.7","dist":{"shasum":"d4a28747c40adf084100315e12c1eb49f122081d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-alpha.7.tgz","fileCount":23,"unpackedSize":430762,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa1kMYCRA9TVsSAnZWagAAoPIP/1gGtxGhqkXnYZwq0Wdv\nT7spY8WVnGBL5RlZS3re8StH7AfkgJMJ0fklouC7c3qSO01KqN3xPkzBan89\nX9+lbxaxqyWs6nv+qPnwfRvdTC9xgukkz2CDVZc17WhpGCIRmusGRBFEqU3z\nvmFXSh46brq1KIgJIjMECKiHvtEhe3jcUTfLiOe/ZIvwxtvGqwtS/Z7sv/qs\nMGTeuLyNZNBzJp6tS/ozeAiUYYSJY0lwZwY7p2f3xInM2zB0xRR4LYBYDYH+\nRJ2lJkfAV1Tph3vxacnOOYoHE278MdVaXIKygv2DZpUE5pIsP8fC+ubArqZd\n8la+zowFGFHGA/VYh/4JzgPX/N7KAuCl9470sfHGEpVxlJz560kuQJTuQ93F\nuAcgAQbsNfplmix6REvfziO8U3O0KStH8q90cQ4mmDKBJj+OZFgVw7fDRhv/\nNFaQ6/dDHl60O30DVJd9AGGYGj1bH5ylpRYIivxwNkxqiOaxl6I6LiDv1o3z\nspL3dJXDsfO2mLIP1Ni3M/zR+oeK0yGqafjYCQKfN8AP4P6uopCFl58EkKew\niy46A3h91zEiPKnaeAynoPJKJe7X/5HYjQJLeM+fiMYhguycqj1ELe3njmG0\nahNE64Gxz9tiuUlkmw3mnza0M/lJ5XV/7tZEflbtWhKVSSgK4tCQXYNv2vu5\n4LOj\r\n=gTH4\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.7_1523991319820_0.6475940960465933"}},"23.0.0-beta.0":{"name":"pretty-format","version":"23.0.0-beta.0","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-beta.0","dist":{"shasum":"9a61b677f3b61e16001d288aeb51a15d6c9c83b2","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-beta.0.tgz","fileCount":23,"unpackedSize":430761,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa2bynCRA9TVsSAnZWagAA7XkP/2E+HrecAWlGe+Le9dT+\nyKFS4Z0InIuigdnF2F5mGtIWZz8sxzDlrFu+wRo4iQvU5A8Enwm4VX1wtjQV\nWW4DjPicPWwtuJXMFBDMYie0tKEj2I65+HFi+6Z5fjxug9IP7S76J/xKMF2o\n7hRL7Qx4zxcambG1oXsjonYBOPbrQ/YfIPmRsyEyW4lbOnq6ETs0nvUzXj7G\nyJhtRXd1JEVZooDYfnj9TMvxm7vAq2fB+m1dc8oahoYXgaGDCjN3NVQROC0k\nt+sWDPawcXtb6jFcXfh9mwEIwW9T+582u7ofS1nWfL8Jj5+XpAasI9RpPZ2S\n8HMgfh93gNK1WRuG3FCgy+ptp3B4DrTE5vWcZfxEikI8+UJtzwrO8itu5SQE\n6/AmmZP6UfLOvP+aRNnV6m67Ravwvrf5QmY3Q0gqGot5IvQ13z2daMVI1cM8\nJ4jhp1w3Dw8K+nwZV2rHl38ZyyiAqpKy/YTUFmNIgSVT/2mfRkDkysw59GZl\n6mkxLjauToYHKzoPMiQdgcuQhd/SXyXgBG6UvOXgZ2ynjsnqZsJ8KYl6luBu\ndVq4I8ocQftGZauJWP9kg6INm6anx/4wpzc8vRZudl8sARiLob0x/2NUvJU0\niblTuq9Y41nC9tYRZWHfUl2WrTUlEpMUTK/toTmuvzuw+WnbQwOxlseRYi2B\nU9tB\r\n=Suzf\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.0_1524219047082_0.4477683770943728"}},"23.0.0-beta.1":{"name":"pretty-format","version":"23.0.0-beta.1","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-beta.1","dist":{"shasum":"f71c105088a74509cf8a8df49612abaf00b017a4","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-beta.1.tgz","fileCount":23,"unpackedSize":430761,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa21xZCRA9TVsSAnZWagAAmSMQAJzRYkBOP8uz2KDASqul\nSAlD8q5ori+cvPFVmMA8kKszoTdZspxpUW8aj6EaamKqum8U/Gqykigh2p91\n9RY+AqHTN0TJm9EzGAr93kSSsEjnLhsimJLeFg4kXLdR3pUPT4jX6ejyfwTo\nQ7sIJFpBIINKeG6vpE+U5hnb49dhFnHKrzHQvMpdJxEcJO6UlAfkzQYBphd/\nCVzv7ECFAhOrsdTU1pt+eT1uhIuUWRANKRohAaPf8N3t45auPjn2KY2fcOow\nb+GppWYx5CwxcnptiuE8mRh+p5BZg650C6Lc15Mgp/t9loPiGREmadInE1t0\nnoICUGyNFENw1hlxmd0VrAtYRIxaJxHHXc6kQo1Jf8C6JMEGq9eMbAYFicuL\nxzkpyF/oLChM+JoOa3PQF6NyRGUgLSKYDJpNng7ssGp2fmezg31Px0sy+C0L\n152CQwOlxg3JSSbNg7rzM+WDIrP7MaxtPTmyNxevq+AAHca3oCkSQD5i2cbU\n2b+k5v3GIhjJUo15jkvsvWeEk87D9ls9O0Somd+upm2A0Xc7WMK4l7HJTAwC\nX1Wpoi5kwEK+eU+wOTQ5VEF4hczdL0RyplSSCD7RkT2OaFWWPIpE6/AbVtQU\nzLqKlavOGruO9NC/bTOQCGuDBU0hxZoEidd3gYtGJGnYbjAcvEcG4F+7GboY\nOB48\r\n=wVW6\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.1_1524325464570_0.7195881897469456"}},"23.0.0-beta.2":{"name":"pretty-format","version":"23.0.0-beta.2","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-beta.2","dist":{"shasum":"fe04b98bfb7ae8ec7a46615f36c36901b59de5a9","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-beta.2.tgz","fileCount":23,"unpackedSize":431340,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa4kHyCRA9TVsSAnZWagAASOUP/i9yKW6fs3PyOCjaCzUP\nyCLh+46gg7/9KXJwxC7kgP/UPK341Cf1MlGZdWxcckBTah7qlptLsm/ubS+o\nHDmaWjO0APIN4iCx5YgVDZjvsOHBkV05/+LVeH10VNQ/u7V2z65WSxBq3PRO\nggukLHxsX0JVkebUKs2hp+GZ8XalCdvPTQYmxE+Gptl5Vr9N3jwhEqrr2Uj6\nVx90GF7Wz+fTpHSIlXeDJ9ydRgHVbzqKf9AbYVLPUR0/mCdLqvDqW6xhj0/D\n2kXRyHmZaLe35C8AtZH6ToJ8d0x4n8hx3x0QfCV2doMUpaKHb//4qQMA0vad\nddluiVkfOC89FKDTuq/OssH4jTwelE3zgYyOKQvSZF8kAwnePbJf87pZ8QKT\nAgZPmTzbU1J4yuZFCxCF6wWInZpRG3twwlXrtvhWsfa5d0MtywP/TAc8VeS+\nP+quXaVEs+4ekMQRR77FJewpkdZEYlcZ27CPsj++WECYaIhRrxIEjf0OksGN\n8Rc9fEnHUqJ8IJpGMHpY9E0KP3mdiowah7tFsdkdwQvtQnekI8Fk4UVfiWLD\nQiLNKlfLN50OcDaV7u7xqPXYnKNxGsAgvZKbtxXkbTBXigc6q137S53VPi6x\nZirTjAZUMtmxLopBNX3dvR/D0UWceFt79j2u8hiJeah4Zx8tZJ+7X0KUmu7A\ntY/y\r\n=fOfm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.2_1524777457327_0.08931287476959171"}},"23.0.0-alpha.3r":{"name":"pretty-format","version":"23.0.0-alpha.3r","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-alpha.3r","dist":{"shasum":"c32c5faf5cd5a88c2b286aefe061644df7e434ce","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-alpha.3r.tgz","fileCount":23,"unpackedSize":431479,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa5xW1CRA9TVsSAnZWagAA01QP/jUGD8Ubf3M4dqFnp9KX\nU/s9YHJdtDFHQHZ6GynPJpzmAUhFnEDRWgyqgQf3r3417nUJ5V2A559vXtNI\nxaiaDS06mLjzt4iz9ZRNB+yFjxT4IZsXJpLxHMDhCsjI7L15wO4rigw7bSwi\nd+F9N5hcUvn/Zv6U89h9O8Rl2/Nz1yHHV7KFKw+KskR6cqyjFMYRkyeCYrCo\ny6N+8pophPxbEquafE2CkCeffCQlUvrdPODx+5BnSPPD1/w8FAP5rZpb+mEh\nKVP1wFPS43KIJDew5Q4TObnjiry5SvmzTyPSLsN9guQHReOTJ8zi3MN0HTUY\nne+TDlW718+KbRX5Y1KCA4oHCfnotTAQUpI5coCoFa7wivZ9XdCq2IZ7TWgH\nUL9PgFCn9KDDthQcsG1J2Nr9gejjDJw/abKc8Q91UUnWtcSUs2mHcsqXJAXu\ntciwnjweGGVt3QNQH5EjZOAzaF1HZiOYzK0W4ysy5/eVXxQX3lCKix4Q62nu\nWb1pbeUq3JXJ5JbMAillQQXSzMLrdCE2IuJntSfNA5obsWWwSbBsoajgqpmR\nTtbaJiT14jPWe3q9Uwgaeqagn4tc5fl53ISVw6EemQkdVNBx2SpTEkI2a/QF\nXPxi7hlyOuUmpk5tRq3TYWaiITi/EPDeLQ+UTBuKM6vXRPlruvMczaRNmXx8\n27dF\r\n=FTUG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-alpha.3r_1525093812918_0.42840596561445365"}},"23.0.0-beta.3r":{"name":"pretty-format","version":"23.0.0-beta.3r","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-beta.3r","dist":{"shasum":"983b39930da7536a3ad40753128f563d37321c88","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-beta.3r.tgz","fileCount":23,"unpackedSize":431478,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa5xbQCRA9TVsSAnZWagAAiw0P/0MY+CRXH0DTdHDfpWlJ\nSo7sprWdlltZfK7Me1cHSbOd7LBNgiOtmRtr7SfyAA2/09DPs/fY2xRBvVN3\nIMMvlmG/tQYVbVUoTegetUWrhmKM01ga0wZQaVlYjCNh/D29fR6LMZLl+7Ke\nmnZvveX/S7wCt65kjw7JhQD6QouzJl2vCWyqKDe2yHPaNII8TR5iQMefiafl\nRyiDmEW1xeQrbzFPfFKQcFxkd8zeQpAMpLWirwd3qznPXY0zFJYl7EwMIch8\noOHFetvX5GSKMKeDstVR8TdaTEeg7cpAzgLIk8sF3iUj9zhFcSI9GpKJArSW\nQCvgXSZSkFanmCn6ZTdwNdcUanaOha2vYjb0WU50RX9gc9Bu89svdCj1j9fv\nL1Ove9ACjmypw948NmbkjM+wQQfjJt06gLNkS1Hfp5MqdPPI8MLcMQb26g9d\nWdYMxlX3owcbETv3fQa/eDV7RxFVNLLGTrvZqf0eXEdaukgw9rJ+ZmZaBxNA\n6bltNUeTnjHdHjtQj3aEvqz/J9y6+zaKPxVWN9yBHmHVWjyX8csxfucL4pMn\n4iudZ0FiyM+CMY8aG5/geULxVE/6mSXqz3ziRNP8gZWz2lUTXjGdL6nH4C9/\nfuy4DK/zr23b58AP6SYKA9jK9lmH52vltKDDnqIoxR29ptDtj6kCYCFUsczp\n3CGk\r\n=WGbF\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-beta.3r_1525094095640_0.8607787653648153"}},"23.0.0-charlie.0":{"name":"pretty-format","version":"23.0.0-charlie.0","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-charlie.0","dist":{"shasum":"4b3d1f9f7aa61db4aeab3a75a993c036b98c1477","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-charlie.0.tgz","fileCount":23,"unpackedSize":431480,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa6ZlYCRA9TVsSAnZWagAATBEQAIYehDXX9KDlb5vzdszV\nHddP7Jp6s0BiXwZ8r2QLW1f5+27MNwfL2cuVW/1KD3ZaizVB/in1NHTvcSrM\nDj15BuzQcQcx4x9m1O79FpoItZGcu12UihUa1gcnylVOzGqeaG6iz8s+Vznu\nncJMRdQElmlZOXg0T2/BRsjvSnKfHkgyWjU3RZ6598pYCr9CM0ExC/sCMLrP\n40G+9VA4HgA80FFf1pWrG5FUpVujpfSSgFJN+XZKHJwEjU8e4KbkQFbhcpFk\nTGSy13dGhOprXzD/QwViUCb53tPKUEgOwNBd2GztzQrYl6e+hFc9kjdcXNb6\ng0zhpd1oAY9QtnKKGWWfybmeCdLFuSUDpBSog8OtCU2Ahn00joBSMbJV6pKw\nNJFTRUmDBhaC02VnXBmKHu5W/r6g1XW05jM0yNwScWnheIDhwXH/KmPr9WBT\nvf1GG17u0XO3AF6PODVOBPjsGFTuSi3KRey5r/yvNQiN+V8NNgmYVl6kLCLH\nRusaTgD0TdciZAm4mpL9mUkU/A7unssdbkhogOeUBAueBAFPObg8xEPaeXTP\nNEw3vZ3BpEqz2ErkzRVn2pibmGyWfir0PUsVgrfoXi4VrqxEh2IxeWWcUa8E\n3xgJ0ssurt2HxluJfHTIo6DJwJASz/7x1nwPE+MMvSLCBvfvVIM5pHTGs/v2\nrPAz\r\n=FHxm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.0_1525258583633_0.7890023758873661"}},"23.0.0-charlie.1":{"name":"pretty-format","version":"23.0.0-charlie.1","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-charlie.1","dist":{"shasum":"cb5fde20ad5f5d2e38197c5f07340e694233e986","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-charlie.1.tgz","fileCount":23,"unpackedSize":432122,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa6vwoCRA9TVsSAnZWagAA7hYQAKUqxNH7ylXNjuLsO1uB\nUgnMLgeG1KHa7L4EyIAWtWoVUEQWqT+W/Wlqn5t/HSIobX51sNJnNxWhF+6u\nLA8FRgN5S0StZHIV+HjsE2m8ui5Zi2a9QGzpKvbYjqrs2PRrNX3Ykd2a92ex\nmsPSvXgUAh8bhpm+NuXmr0TjuBUWpUDZAtyTWLyJpqLTntVhRmifXMx9qSvP\n3PTgnOXhkH/XQ6hEqFZZ3noMx7Xv4htj9zItDtQWxT5EOMMZSunKz/nZeP+V\n7ccA5PU/2LamnFCUvY8NkiTbRHfC3PhwFaGW1EYgYhWpC9THZP2SBSZ/G1BZ\nSZf0uI52XPzbr/BKSknM7XEC1fpFwtfLp1YCPqPqCe8HNgfbGdbQRwknQjwa\nfjCJO93ORvGsAYCPPhOba7ZIkvZJ9BrD2bZPtV7uuGYkVQLrL8qG8YJkfbxQ\nIhW5hVbyozi7o8k/BQeP6oqFA4syH4HZ2xrFdp5iIte7wqqxBakINODsb17L\nDnjzvqQE5elYy+1xHbkZgF4NyUHAPq/u43ZUZ+lbo86dB+UGLfXLo4q+jrDB\n4E5CBS0P3je28FFhU+bAOz8sk8Qgxx0EC+EXOgJdK0LfBgp7+YZNtoVJbH3H\nSp5ApXBJBsY2HcIdK7wrdBB664UYcDx2Y4QBpwpASoxyC+PW3Mg46gFJg4yg\nLCCt\r\n=aEGb\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.1_1525349415837_0.9022465978031704"}},"23.0.0-charlie.2":{"name":"pretty-format","version":"23.0.0-charlie.2","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-charlie.2","dist":{"shasum":"ab87c9fd8ff445bd2ace394c84000201a041f217","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-charlie.2.tgz","fileCount":23,"unpackedSize":432720,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+q2fCRA9TVsSAnZWagAAjZMP/jg0tq3BOCSAwZsvuZFb\nech7cxKXfhHo1T3tySe4bh9Kdwtyc8spOPhTMi7RWatFzX+Aeithel5E7aru\nF9ClfRdUfYH0Fwyb4fDS47YO4lAiX/1ttJE7IoZ8CegBMrrlegwNi2FUgysO\nXOfVprQFnJPbinjvt4oemzmtfF9quZwdlBVPCT1Y44Q+7iVePXHsJTKdpspm\nzXsCgcLn19HiEHiimFmOusPimbEujXbxLbdbr2i61ONWGHXVdvLIf02k2ZEy\n0UtFkJjXnNCUwMDoZZ60ztw++kcUtG1mqjv0eIU8Nf7H+c8rn+3cLW4wM04I\nfTcEJE9ocXpXMaqHfRb6jeVJ4BwPpfuvPEh+eKXKbgtS1CeNQCaPn6iA89cJ\nMhpuW6tQO8d6y5tQxJSk9NN1FXOeTSVt3FBdOOaIdcQeaOSv3PjN4CBxk7pG\nJmB1ajCaamkKzrdj/DVr+jNK77v4C7S5xS5yDGu9lrM+iWNaki0Ut6Cc0Gnt\nS4ISgDo7p1/HttoTuDS8CYjlduc8/O4YYFx4vPdhjhJP6YReY82Bk7T53xST\nYtmI6q9rm0eiLp/mAvreyDXasatp9JYg9tyTVmcuQeQEozvZ9h3g58fJnMF6\nWLklPUsEreQQnT1EUtfQbkYjmJzGzSWM/iQxUHOrMZtvA2z63I+hRzUR1XbG\neTnl\r\n=uih0\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.2_1526377887160_0.16335274965802293"}},"23.0.0-charlie.3":{"name":"pretty-format","version":"23.0.0-charlie.3","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-charlie.3","dist":{"shasum":"b251f1bdd5da81110c8d48842ac722405085f5fc","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-charlie.3.tgz","fileCount":23,"unpackedSize":432720,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbBDA1CRA9TVsSAnZWagAAKSgP/1UHycsBuzD5SDOuJ2GD\nwF7sqH+MGh0ycpMimPKuSAkkBFCyzJSwq4iFxrtxXDPWmy7lE9NKtMLNgiT9\nUVZRIjrCZ0+x9s5QKPC+S65eqp+vsRW35sLVfYM7DYK3bqQNFAZUUTyTI1TV\npl8A9vt2ObC5ukMkL5TIgQAMN0+3vJUA2qp/4kTsV1LMZoa4UhMJ2YTMWfMU\nDKBhIT7sD0AfEn6Qcp0zeKGBq2O3L8ayUvGQnVLhLzL2PbqLKC8X0VfkBZVS\nppZi069gCLigGz3plypD2lB0YBTh+VCna1Zg7E5dqbOCEql1ei9ttOU8MjPw\npquVopTAIpv+tnTcHg/lkcFapZaoy75zoD2PFBLD2XwHy92W1UUcIdOLdz61\nuBMP3BDhj6b4MP7ZRSI4JNhXRGAYPmRbzm4IcdKozhzyzAKG4v/RSPE35Jmr\nl5mM97CvHx6BgIZ59ZFrKHrFClT3nYvycT+RPpItFDDb9IKY0jaDaMtLu5uw\n7yxnzkiOukVlIXIX/hcpiK+8lDAJoY+i6IRCAnvRUZiBku8RtkQOOxgSe/6T\nWqZSBH5vpBSMPW7wrokmtjPNeC59mINdn+k/+hyo3DL2ZVKBd4QrKcxCVJew\nB13+k+fFBNsDWPlr4epY1/xfK0LQid2SmCi/iN2VGMEx53XhyFi7MQKgWAG+\nqKOv\r\n=DjCz\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.3_1527001141117_0.6048019972719636"}},"23.0.0-charlie.4":{"name":"pretty-format","version":"23.0.0-charlie.4","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"readmeFilename":"README.md","readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`,\n    `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`,\n      `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`,\n      `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined\n  plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from\n[ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of\nits built-in plugins. For this purpose, plugins are also known as **snapshot\nserializers**.\n\nTo serialize application-specific data types, you can add modules to\n`devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any\nmodules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They\nprecede built-in plugins for React, HTML, and Immutable.js data types. For\nexample, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)`\nmethod returns a truthy value, then `prettyFormat(val, options)` returns the\nresult from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in\n  **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have\n  `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize\n**objects** which have certain properties, then a guarded expression like\n`val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in\n`options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is\n  `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of\ncourse, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example,\n    array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is\n  `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose\n  values are escape codes from\n  [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in\n  `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding\nrest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the\noriginal `print` interface is a reason to use the improved `serialize`\ninterface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","_id":"pretty-format@23.0.0-charlie.4","dist":{"shasum":"9b3f34aa66113f497b637a9b72a9c8a5ff749d0d","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0-charlie.4.tgz","fileCount":23,"unpackedSize":432720,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbBUWSCRA9TVsSAnZWagAADEQP/j8IvBo0ZUMbkn/cI/xp\n2wMbKTH2WeBxkV7aIBxS57FwGrEiFSUzDgi2hmWmjFpEaT/UchC4BgKfTCde\nDi4MkgbPsr475prPHR7xGDRXnOK1MNQ89cWQajWWjKfbqludocE4UloHd/pO\nsw+6d5+uvSOmo51KvXMnYrvQ4a26B9HoYUHMEKR58uWVTSIfxRIyg8nRkcsB\noxk+A27p8kvOBh/h5slsTDiHahODY8CGiz9rLGUetVQ5Pksm3iMwTXE2EXT3\nvAwUt8oTDMnUNPLQV8QB3N1qrpGL1N0ibMPhPwndaF+PG2KM7W/l5/C14Ha7\nX5hH9P+zNInwg0YkNpW+Dt3ONVZZiQArQ0e3GQa65FgPgXLiDZUxfRsXgGnX\nr16XOYwyUIiQwPiIiWOdfLx4BQdm0kNVNK7wTcUTqX/WPDH4S3O4t33rGWoL\nZQn4ENjQ70spKJ6CQtW/64lfs2aOsFs9sWorTAKiIcRkxJYkF3D/3x/OsAxS\n+T5HUZXgMu1B2vpwGdnxkYDm6gnubkZKKdYh+OMMnrnFNJIlx8zz4k0VwdVg\nrNu7oMruRuEcSqSlhIngrvNOMceHqwW80PORBgb6Gds7QTT9sOATPUKox5Kz\nnmHIb2v5101Yewf841RWuD0eUInVdqhIvTzJtRcCt1ggoTz4DiSojauOlvo2\nRpOc\r\n=tUpG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0-charlie.4_1527072146060_0.2617374969989241"}},"23.0.0":{"name":"pretty-format","version":"23.0.0","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"_id":"pretty-format@23.0.0","dist":{"shasum":"b66dc584a0907b1969783c4c20e4d1180b18ac75","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.0.tgz","fileCount":23,"unpackedSize":432710,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbBvXDCRA9TVsSAnZWagAAVF4P/1rjgZx0TLyQwWM5ZUnk\n8QVeN/n3frezxgbc0bYGmHsqePscEaV+u4JhuHXCEq208OsLZvnafsbfdouF\nC6HuKwzwPg47ecZI1rw60BGZ2dYBL/8/yzWAZXH3qSCfFd3BV0nCA4r1DwTT\n33gOadWiqAoDYLFnRsnRX7bHZseaCqNDMghHFXsSBXRRoZx6I6QQcuiIn6UM\njQFAgH4i4idU1FMtUwixbfduqreV8TS5ssuxHUhs1QC4q5S+buetOJ8Js/wo\n06a/7Jz84AdRtKS/b+1i+orOrPmFGspvpuXRmsIuX2hH+Zy8oSZq1pB+yQuw\nkS63ooT103mqeBg2oN0cgO+r+JUCxd3oHbdWm1ah9rbMR3RyzftozW4B2Gat\nZiRgAgiJub/U3wIqQEzgfVVui2FzfVLMinSFEg5+m8jupy4lc9O8e1+KKeLm\nBE/HCLJhc/DcLsYxXF3/Vrsw9yRQr/7TipdabUzscvJPO1aT+4tukydIlf29\nO2tWca+za3OLFZIGNTc1WKTrBrnVynukSeuQchLXWpQ3LsYyPGQq8wRa+hlu\n9LE0TX+VmGdcADeL4q4nwk11SSLgmMBqsbphl39HihfORxaWXE7ntM4eN7l+\n/NmaFmmJxrXhk9acbMQaTNrBE2YDdv15PEAYdxT8XvXsuVHBGyKujSmCbY7r\n3KgL\r\n=8WA7\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.0_1527182786416_0.3664543715646642"}},"23.0.1":{"name":"pretty-format","version":"23.0.1","repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"license":"MIT","description":"Stringify any JavaScript value.","main":"build/index.js","browser":"build-es5/index.js","author":{"name":"James Kyle","email":"me@thejameskyle.com"},"dependencies":{"ansi-regex":"^3.0.0","ansi-styles":"^3.2.0"},"devDependencies":{"immutable":"^4.0.0-rc.9","react":"*","react-dom":"*","react-test-renderer":"*"},"_id":"pretty-format@23.0.1","dist":{"shasum":"d61d065268e4c759083bccbca27a01ad7c7601f4","tarball":"https://registry.npmjs.org/pretty-format/-/pretty-format-23.0.1.tgz","fileCount":23,"unpackedSize":433054,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbCs8yCRA9TVsSAnZWagAA/XUP/17XFHffKMQK5sHkzigC\nJX2sCkgY0LzowxMkzRO6ocY0sWnBrJXG9/z+hb4IDuzDuaLfofmw17DC2zTY\n/TOJz3118Xbb+WKLJ3wccT6GPrKeX3Irqf9D4iMwmZ+CrEEB9Fe25Oag8MRO\nQL/r1wT4KGfsIQibauUJySzMsHqV5PCYArX1LC5m8pNs25CVDsMtEi0gcCRN\nGTRo+HWziauDVJkZaahi/LkgGBbqltsDlZe4b5lztQ+2/bNNJ0hK9H+DzQoY\nFEakHiVCbD7eDf3AbS/WoSqpKA7EbF1eTYiKlmOeQETn4JOV33FeiZAQVaLg\ni+4jpZYosMppdhbHWDplKEko9kmKhQiQ5+bjNR1p9B5c/zb29M8qD0KzWuLV\nSjmepFXcWFyAYVHcyTTjrYMRW6MiXc6MOIfH8WWP6/kG0hDpqWNSbG8JwtOW\nhNItR7kc6VIG+G4NeJ6wS7RZi6w9YWiPtWbF8tDboeidsOVlS5GPUab6upag\n04lMeLJQdf0hNAtrFJsMb9lDs8q+wLoH5OeihTcMnVAIrC3XR8mM3C0aFdD+\n5+pMv98mEGCTgQPbzXiUlmNLQhVpGSE4ZRQcNe74y32sZvMTsIah9aJUXO1q\nmN3vOnuSzTxlR9BW82ISg4TG5us+3ywD1JxUrLhJLNL423sB7s+ehPE+hjwt\nQSMI\r\n=CHUR\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"_npmUser":{"name":"mjesun","email":"mjesun@hotmail.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/pretty-format_23.0.1_1527435057085_0.6097930469393269"}}},"readme":"# pretty-format\n\n> Stringify any JavaScript value.\n\n* Supports all built-in JavaScript types\n  * primitive types: `Boolean`, `null`, `Number`, `String`, `Symbol`, `undefined`\n  * other non-collection types: `Date`, `Error`, `Function`, `RegExp`\n  * collection types:\n    * `arguments`, `Array`, `ArrayBuffer`, `DataView`, `Float32Array`, `Float64Array`, `Int8Array`, `Int16Array`, `Int32Array`, `Uint8Array`, `Uint8ClampedArray`, `Uint16Array`, `Uint32Array`,\n    * `Map`, `Set`, `WeakMap`, `WeakSet`\n    * `Object`\n* [Blazingly fast](https://gist.github.com/thejameskyle/2b04ffe4941aafa8f970de077843a8fd)\n  * similar performance to `JSON.stringify` in v8\n  * significantly faster than `util.format` in Node.js\n* Serialize application-specific data types with built-in or user-defined plugins\n\n## Installation\n\n```sh\n$ yarn add pretty-format\n```\n\n## Usage\n\n```js\nconst prettyFormat = require('pretty-format'); // CommonJS\n```\n\n```js\nimport prettyFormat from 'pretty-format'; // ES2015 modules\n```\n\n```js\nconst val = {object: {}};\nval.circularReference = val;\nval[Symbol('foo')] = 'foo';\nval.map = new Map([['prop', 'value']]);\nval.array = [-0, Infinity, NaN];\n\nconsole.log(prettyFormat(val));\n/*\nObject {\n  \"array\": Array [\n    -0,\n    Infinity,\n    NaN,\n  ],\n  \"circularReference\": [Circular],\n  \"map\": Map {\n    \"prop\" => \"value\",\n  },\n  \"object\": Object {},\n  Symbol(foo): \"foo\",\n}\n*/\n```\n\n## Usage with options\n\n```js\nfunction onClick() {}\n\nconsole.log(prettyFormat(onClick));\n/*\n[Function onClick]\n*/\n\nconst options = {\n  printFunctionName: false,\n};\nconsole.log(prettyFormat(onClick, options));\n/*\n[Function]\n*/\n```\n\n| key                 | type      | default    | description                                             |\n| :------------------ | :-------- | :--------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | `true`     | call `toJSON` method (if it exists) on objects          |\n| `escapeRegex`       | `boolean` | `false`    | escape special characters in regular expressions        |\n| `highlight`         | `boolean` | `false`    | highlight syntax with colors in terminal (some plugins) |\n| `indent`            | `number`  | `2`        | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | `Infinity` | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | `false`    | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | `[]`       | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | `true`     | include or omit the name of a function                  |\n| `theme`             | `object`  |            | colors to highlight syntax in terminal                  |\n\nProperty values of `theme` are from [ansi-styles colors](https://github.com/chalk/ansi-styles#colors)\n\n```js\nconst DEFAULT_THEME = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n```\n\n## Usage with plugins\n\nThe `pretty-format` package provides some built-in plugins, including:\n\n* `ReactElement` for elements from `react`\n* `ReactTestComponent` for test objects from `react-test-renderer`\n\n```js\n// CommonJS\nconst prettyFormat = require('pretty-format');\nconst ReactElement = prettyFormat.plugins.ReactElement;\nconst ReactTestComponent = prettyFormat.plugins.ReactTestComponent;\n\nconst React = require('react');\nconst renderer = require('react-test-renderer');\n```\n\n```js\n// ES2015 modules and destructuring assignment\nimport prettyFormat from 'pretty-format';\nconst {ReactElement, ReactTestComponent} = prettyFormat.plugins;\n\nimport React from 'react';\nimport renderer from 'react-test-renderer';\n```\n\n```js\nconst onClick = () => {};\nconst element = React.createElement('button', {onClick}, 'Hello World');\n\nconst formatted1 = prettyFormat(element, {\n  plugins: [ReactElement],\n  printFunctionName: false,\n});\nconst formatted2 = prettyFormat(renderer.create(element).toJSON(), {\n  plugins: [ReactTestComponent],\n  printFunctionName: false,\n});\n/*\n<button\n  onClick=[Function]\n>\n  Hello World\n</button>\n*/\n```\n\n## Usage in Jest\n\nFor snapshot tests, Jest uses `pretty-format` with options that include some of its built-in plugins. For this purpose, plugins are also known as **snapshot serializers**.\n\nTo serialize application-specific data types, you can add modules to `devDependencies` of a project, and then:\n\nIn an **individual** test file, you can add a module as follows. It precedes any modules from Jest configuration.\n\n```js\nimport serializer from 'my-serializer-module';\nexpect.addSnapshotSerializer(serializer);\n\n// tests which have `expect(value).toMatchSnapshot()` assertions\n```\n\nFor **all** test files, you can specify modules in Jest configuration. They precede built-in plugins for React, HTML, and Immutable.js data types. For example, in a `package.json` file:\n\n```json\n{\n  \"jest\": {\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n## Writing plugins\n\nA plugin is a JavaScript object.\n\nIf `options` has a `plugins` array: for the first plugin whose `test(val)` method returns a truthy value, then `prettyFormat(val, options)` returns the result from either:\n\n* `serialize(val, …)` method of the **improved** interface (available in **version 21** or later)\n* `print(val, …)` method of the **original** interface (if plugin does not have `serialize` method)\n\n### test\n\nWrite `test` so it can receive `val` argument of any type. To serialize **objects** which have certain properties, then a guarded expression like `val != null && …` or more concise `val && …` prevents the following errors:\n\n* `TypeError: Cannot read property 'whatever' of null`\n* `TypeError: Cannot read property 'whatever' of undefined`\n\nFor example, `test` method of built-in `ReactElement` plugin:\n\n```js\nconst elementSymbol = Symbol.for('react.element');\nconst test = val => val && val.$$typeof === elementSymbol;\n```\n\nPay attention to efficiency in `test` because `pretty-format` calls it often.\n\n### serialize\n\nThe **improved** interface is available in **version 21** or later.\n\nWrite `serialize` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* unchanging `config` object: derived from `options`\n* current `indentation` string: concatenate to `indent` from `config`\n* current `depth` number: compare to `maxDepth` from `config`\n* current `refs` array: find circular references in objects\n* `printer` callback function: serialize children\n\n### config\n\n| key                 | type      | description                                             |\n| :------------------ | :-------- | :------------------------------------------------------ |\n| `callToJSON`        | `boolean` | call `toJSON` method (if it exists) on objects          |\n| `colors`            | `Object`  | escape codes for colors to highlight syntax             |\n| `escapeRegex`       | `boolean` | escape special characters in regular expressions        |\n| `indent`            | `string`  | spaces in each level of indentation                     |\n| `maxDepth`          | `number`  | levels to print in arrays, objects, elements, and so on |\n| `min`               | `boolean` | minimize added space: no indentation nor line breaks    |\n| `plugins`           | `array`   | plugins to serialize application-specific data types    |\n| `printFunctionName` | `boolean` | include or omit the name of a function                  |\n| `spacingInner`      | `strong`  | spacing to separate items in a list                     |\n| `spacingOuter`      | `strong`  | spacing to enclose a list of items                      |\n\nEach property of `colors` in `config` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\nSome properties in `config` are derived from `min` in `options`:\n\n* `spacingInner` and `spacingOuter` are **newline** if `min` is `false`\n* `spacingInner` is **space** and `spacingOuter` is **empty string** if `min` is `true`\n\n### Example of serialize and test\n\nThis plugin is a pattern you can apply to serialize composite data types. Of course, `pretty-format` does not need a plugin to serialize arrays :)\n\n```js\n// We reused more code when we factored out a function for child items\n// that is independent of depth, name, and enclosing punctuation (see below).\nconst SEPARATOR = ',';\nfunction serializeItems(items, config, indentation, depth, refs, printer) {\n  if (items.length === 0) {\n    return '';\n  }\n  const indentationItems = indentation + config.indent;\n  return (\n    config.spacingOuter +\n    items\n      .map(\n        item =>\n          indentationItems +\n          printer(item, config, indentationItems, depth, refs), // callback\n      )\n      .join(SEPARATOR + config.spacingInner) +\n    (config.min ? '' : SEPARATOR) + // following the last item\n    config.spacingOuter +\n    indentation\n  );\n}\n\nconst plugin = {\n  test(val) {\n    return Array.isArray(val);\n  },\n  serialize(array, config, indentation, depth, refs, printer) {\n    const name = array.constructor.name;\n    return ++depth > config.maxDepth\n      ? '[' + name + ']'\n      : (config.min ? '' : name + ' ') +\n          '[' +\n          serializeItems(array, config, indentation, depth, refs, printer) +\n          ']';\n  },\n};\n```\n\n```js\nconst val = {\n  filter: 'completed',\n  items: [\n    {\n      text: 'Write test',\n      completed: true,\n    },\n    {\n      text: 'Write serialize',\n      completed: true,\n    },\n  ],\n};\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": Array [\n    Object {\n      \"completed\": true,\n      \"text\": \"Write test\",\n    },\n    Object {\n      \"completed\": true,\n      \"text\": \"Write serialize\",\n    },\n  ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    indent: 4,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n    \"filter\": \"completed\",\n    \"items\": Array [\n        Object {\n            \"completed\": true,\n            \"text\": \"Write test\",\n        },\n        Object {\n            \"completed\": true,\n            \"text\": \"Write serialize\",\n        },\n    ],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    maxDepth: 1,\n    plugins: [plugin],\n  }),\n);\n/*\nObject {\n  \"filter\": \"completed\",\n  \"items\": [Array],\n}\n*/\n```\n\n```js\nconsole.log(\n  prettyFormat(val, {\n    min: true,\n    plugins: [plugin],\n  }),\n);\n/*\n{\"filter\": \"completed\", \"items\": [{\"completed\": true, \"text\": \"Write test\"}, {\"completed\": true, \"text\": \"Write serialize\"}]}\n*/\n```\n\n### print\n\nThe **original** interface is adequate for plugins:\n\n* that **do not** depend on options other than `highlight` or `min`\n* that **do not** depend on `depth` or `refs` in recursive traversal, and\n* if values either\n  * do **not** require indentation, or\n  * do **not** occur as children of JavaScript data structures (for example, array)\n\nWrite `print` to return a string, given the arguments:\n\n* `val` which “passed the test”\n* current `printer(valChild)` callback function: serialize children\n* current `indenter(lines)` callback function: indent lines at the next level\n* unchanging `config` object: derived from `options`\n* unchanging `colors` object: derived from `options`\n\nThe 3 properties of `config` are `min` in `options` and:\n\n* `spacing` and `edgeSpacing` are **newline** if `min` is `false`\n* `spacing` is **space** and `edgeSpacing` is **empty string** if `min` is `true`\n\nEach property of `colors` corresponds to a property of `theme` in `options`:\n\n* the key is the same (for example, `tag`)\n* the value in `colors` is a object with `open` and `close` properties whose values are escape codes from [ansi-styles](https://github.com/chalk/ansi-styles) for the color value in `theme` (for example, `'cyan'`)\n\n### Example of print and test\n\nThis plugin prints functions with the **number of named arguments** excluding rest argument.\n\n```js\nconst plugin = {\n  print(val) {\n    return `[Function ${val.name || 'anonymous'} ${val.length}]`;\n  },\n  test(val) {\n    return typeof val === 'function';\n  },\n};\n```\n\n```js\nconst val = {\n  onClick(event) {},\n  render() {},\n};\n\nprettyFormat(val, {\n  plugins: [plugin],\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val);\n/*\nObject {\n  \"onClick\": [Function onClick],\n  \"render\": [Function render],\n}\n*/\n```\n\nThis plugin **ignores** the `printFunctionName` option. That limitation of the original `print` interface is a reason to use the improved `serialize` interface, described above.\n\n```js\nprettyFormat(val, {\n  plugins: [pluginOld],\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function onClick 1],\n  \"render\": [Function render 0],\n}\n*/\n\nprettyFormat(val, {\n  printFunctionName: false,\n});\n/*\nObject {\n  \"onClick\": [Function],\n  \"render\": [Function],\n}\n*/\n```\n","maintainers":[{"email":"aaron@abramov.io","name":"aaronabramov"},{"email":"christoph.pojer@gmail.com","name":"cpojer"},{"email":"opensource+npm@fb.com","name":"fb"},{"email":"jean@lauliac.com","name":"jeanlauliac"},{"email":"mjesun@hotmail.com","name":"mjesun"}],"time":{"modified":"2018-05-27T15:31:02.740Z","created":"2015-03-08T04:52:08.223Z","1.0.0":"2015-03-08T04:52:08.223Z","1.1.0":"2015-03-15T23:34:23.843Z","1.1.1":"2015-03-16T17:00:42.800Z","1.2.0":"2015-03-16T17:39:03.466Z","2.0.0":"2016-06-01T22:02:28.012Z","2.1.0":"2016-06-01T23:52:20.958Z","3.0.0":"2016-06-13T20:33:54.044Z","3.1.0":"2016-06-14T04:31:59.244Z","3.2.0":"2016-06-15T03:23:45.115Z","3.3.0":"2016-06-15T06:31:28.366Z","3.3.1":"2016-06-21T17:41:02.344Z","3.3.2":"2016-06-22T21:26:05.428Z","3.4.0":"2016-07-02T20:42:16.060Z","3.4.1":"2016-07-04T17:49:21.976Z","3.4.2":"2016-07-06T01:44:16.253Z","3.4.3":"2016-07-06T06:28:01.288Z","3.5.0":"2016-07-08T08:29:23.317Z","3.5.1":"2016-08-01T17:06:25.371Z","3.5.2":"2016-08-04T02:53:37.087Z","3.5.3":"2016-08-11T00:23:51.193Z","3.6.0":"2016-08-17T20:20:08.951Z","3.7.0":"2016-09-01T15:16:07.274Z","3.8.0":"2016-09-11T01:43:26.665Z","4.0.0":"2016-09-11T02:02:31.572Z","4.1.0":"2016-09-20T11:22:51.213Z","4.2.0":"2016-09-21T04:23:39.611Z","4.2.1":"2016-09-21T06:36:48.110Z","4.2.2":"2016-11-01T23:01:44.066Z","4.2.3":"2016-11-10T18:14:42.939Z","4.3.0":"2016-11-18T07:08:21.917Z","4.3.1":"2016-11-18T14:39:30.721Z","18.0.0":"2016-12-15T11:24:39.904Z","18.1.0":"2016-12-29T01:47:37.936Z","18.5.0-alpha.7da3df39":"2017-02-17T16:57:58.225Z","19.0.0":"2017-02-21T09:30:33.083Z","19.1.0-alpha.eed82034":"2017-03-17T00:41:24.175Z","19.2.0-alpha.993e64af":"2017-05-04T15:37:41.927Z","19.3.0-alpha.85402254":"2017-05-05T11:48:22.883Z","20.0.0":"2017-05-06T12:32:36.938Z","20.0.1":"2017-05-11T10:50:08.654Z","20.0.2":"2017-05-17T10:50:23.917Z","20.0.3":"2017-05-17T10:57:13.531Z","20.1.0-alpha.1":"2017-06-28T10:16:21.675Z","20.1.0-alpha.2":"2017-06-29T16:36:48.331Z","20.1.0-alpha.3":"2017-06-30T14:20:54.944Z","20.1.0-beta.1":"2017-07-13T10:33:43.286Z","20.1.0-chi.1":"2017-07-14T10:25:05.727Z","20.1.0-delta.1":"2017-07-18T08:46:55.252Z","20.1.0-delta.2":"2017-07-19T12:56:44.830Z","20.1.0-delta.3":"2017-07-25T22:12:26.282Z","20.1.0-delta.4":"2017-07-27T17:19:08.800Z","20.1.0-delta.5":"2017-08-01T16:33:37.018Z","20.1.0-echo.1":"2017-08-08T16:49:56.294Z","21.0.0-alpha.1":"2017-08-11T10:14:06.327Z","21.0.0-alpha.2":"2017-08-21T22:06:49.160Z","21.0.0-beta.1":"2017-08-24T21:26:51.250Z","21.0.0":"2017-09-04T15:01:55.963Z","21.0.2":"2017-09-08T14:19:28.371Z","21.1.0":"2017-09-14T01:50:14.649Z","21.2.0":"2017-09-26T20:22:19.365Z","21.2.1":"2017-09-27T22:15:03.745Z","21.3.0-alpha.1e3ee68e":"2017-09-28T14:20:41.836Z","21.3.0-alpha.eff7a1cf":"2017-10-01T16:46:50.733Z","21.3.0-beta.1":"2017-10-04T10:48:39.647Z","21.3.0-beta.2":"2017-10-13T09:54:06.677Z","21.3.0-beta.3":"2017-10-25T19:34:06.251Z","21.3.0-beta.4":"2017-10-26T13:26:59.176Z","21.3.0-beta.5":"2017-11-02T13:17:32.386Z","21.3.0-beta.6":"2017-11-03T16:21:36.255Z","21.3.0-beta.7":"2017-11-06T09:39:50.075Z","21.3.0-beta.8":"2017-11-07T17:43:44.016Z","21.3.0-beta.9":"2017-11-22T13:17:33.949Z","21.3.0-beta.10":"2017-11-25T12:39:25.671Z","21.3.0-beta.11":"2017-11-29T14:31:21.873Z","21.3.0-beta.12":"2017-12-05T18:48:35.102Z","21.3.0-beta.13":"2017-12-06T14:37:08.966Z","21.3.0-beta.14":"2017-12-12T10:52:36.520Z","21.3.0-beta.15":"2017-12-15T13:27:40.801Z","22.0.0":"2017-12-18T11:03:25.836Z","22.0.1":"2017-12-18T20:29:25.187Z","22.0.2":"2017-12-19T13:53:04.651Z","22.0.3":"2017-12-19T14:58:56.170Z","22.0.5":"2018-01-09T15:09:54.203Z","22.0.6":"2018-01-11T09:46:46.730Z","22.1.0":"2018-01-15T11:57:17.363Z","22.4.0":"2018-02-20T12:03:31.362Z","22.4.3":"2018-03-21T16:08:10.760Z","23.0.0-alpha.2":"2018-03-26T10:40:47.317Z","23.0.0-alpha.4":"2018-03-26T12:31:41.960Z","23.0.0-alpha.5":"2018-04-10T19:18:20.898Z","23.0.0-alpha.5r":"2018-04-11T05:52:49.951Z","23.0.0-alpha.6r":"2018-04-12T07:01:35.462Z","23.0.0-alpha.7":"2018-04-17T18:55:20.032Z","23.0.0-beta.0":"2018-04-20T10:10:47.213Z","23.0.0-beta.1":"2018-04-21T15:44:24.721Z","23.0.0-beta.2":"2018-04-26T21:17:37.807Z","23.0.0-alpha.3r":"2018-04-30T13:10:13.056Z","23.0.0-beta.3r":"2018-04-30T13:14:55.844Z","23.0.0-charlie.0":"2018-05-02T10:56:23.810Z","23.0.0-charlie.1":"2018-05-03T12:10:15.961Z","23.0.0-charlie.2":"2018-05-15T09:51:27.346Z","23.0.0-charlie.3":"2018-05-22T14:59:01.270Z","23.0.0-charlie.4":"2018-05-23T10:42:26.200Z","23.0.0":"2018-05-24T17:26:26.517Z","23.0.1":"2018-05-27T15:30:57.217Z"},"repository":{"type":"git","url":"https://github.com/facebook/jest.git"},"author":{"name":"James Kyle","email":"me@thejameskyle.com"},"license":"MIT","readmeFilename":"README.md","users":{"chocolateboy":true,"robmcguinness":true,"capaj":true,"samhagman":true,"tribou":true,"program247365":true,"alexxnica":true,"vaju":true,"styfle":true,"ryanlittle":true,"willwolffmyren":true},"_attachments":{},"_etag":"W/\"ef2fe232f2060a3fe98285b3d84fa713\"","_lastModified":"Sun, 27 May 2018 15:31:04 GMT"}