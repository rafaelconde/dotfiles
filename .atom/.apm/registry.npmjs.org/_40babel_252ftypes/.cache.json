{"_id":"@babel/types","_rev":"33-2be943a9fe5ea7ef8c91550df5d2e7f5","name":"@babel/types","description":"Babel Types is a Lodash-esque utility library for AST nodes","dist-tags":{"latest":"7.0.0-beta.46"},"versions":{"7.0.0-beta.4":{"name":"@babel/types","version":"7.0.0-beta.4","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.4","babylon":"^7.0.0-beta.30"},"_id":"@babel/types@7.0.0-beta.4","_npmVersion":"5.5.1","_nodeVersion":"8.1.4","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-yLvBW5TTAgJwURAUAdZa1vrFTkwXXvk0Kw48LYvgxpyT/IaV8W4OIhxdVztAt5ruDQ/OFUwHpzWqk6TN3EfmWA==","shasum":"988cc7683c448d7710e7d80bd88558183a102349","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.4.tgz"},"maintainers":[{"name":"hzoo","email":"hi@henryzoo.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.4.tgz_1509388495763_0.6357525852508843"},"directories":{}},"7.0.0-beta.5":{"name":"@babel/types","version":"7.0.0-beta.5","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.5","babylon":"^7.0.0-beta.30"},"_id":"@babel/types@7.0.0-beta.5","_npmVersion":"5.5.1","_nodeVersion":"8.1.4","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-1mUWQwJMG/KxBVCgLISQIxhtN+bnZs6qxjnzyHdXIEa9YE4z+XMQHxZsCIL8cJvP7H4NZOva+fg9YNDVcy99xA==","shasum":"56d6b5bee7d999ba198dc245447f11ffaa6c3683","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.5.tgz"},"maintainers":[{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.5.tgz_1509396995638_0.6233448232524097"},"directories":{}},"7.0.0-beta.31":{"name":"@babel/types","version":"7.0.0-beta.31","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.31","babylon":"7.0.0-beta.31"},"_id":"@babel/types@7.0.0-beta.31","_npmVersion":"5.5.1","_nodeVersion":"8.1.4","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-exAHB+NeFGxkfQ5dSUD03xl3zYGneeSk2Mw2ldTt/nTvYxuDiuSp3DlxgUBgzbdTFG4fbwPk0WtKWOoTXCmNGg==","shasum":"42c9c86784f674c173fb21882ca9643334029de4","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.31.tgz"},"maintainers":[{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.31.tgz_1509739415515_0.19840487372130156"},"directories":{}},"7.0.0-beta.32":{"name":"@babel/types","version":"7.0.0-beta.32","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.32","babylon":"7.0.0-beta.32"},"_id":"@babel/types@7.0.0-beta.32","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-w8+wzVcYCMb9OfaBfay2Vg5hyj7UfBX6qQtA+kB0qsW1h1NH/7xHMwvTZNqkuFBwjz5wxGS2QmaIcC3HH+UoxA==","shasum":"c317d0ecc89297b80bbcb2f50608e31f6452a5ff","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.32.tgz"},"maintainers":[{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.32.tgz_1510493607326_0.45274083921685815"},"directories":{}},"7.0.0-beta.33":{"name":"@babel/types","version":"7.0.0-beta.33","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.33","babylon":"7.0.0-beta.33"},"_id":"@babel/types@7.0.0-beta.33","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-Re3LmA/LeS0MoNr2G9wuNzPlSmLFSfUiFWsYpfZG5vATbWalLoXPZja8GQt28pMRAqNuy15FLEZnAoF3YnkfyQ==","shasum":"d74217bf84524b244f60ba475b4a611c2630564f","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.33.tgz"},"maintainers":[{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.33.tgz_1512138512372_0.6821447301190346"},"directories":{}},"7.0.0-beta.34":{"name":"@babel/types","version":"7.0.0-beta.34","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.34","babylon":"7.0.0-beta.34"},"_id":"@babel/types@7.0.0-beta.34","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-KD5CF1dmZE8i9ggW9L+YSak7j+b3YTGQZUs9WMF6tgG/aw2x/VhTxfooqXR0Bbfzkb5M6WGiTHbzCmx8ll4tQQ==","shasum":"ce8da730b834c782ec64a2baf3ac0200dd328816","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.34.tgz"},"maintainers":[{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.34.tgz_1512225572135_0.38195543619804084"},"directories":{}},"7.0.0-beta.35":{"name":"@babel/types","version":"7.0.0-beta.35","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.35","babylon":"7.0.0-beta.35"},"_id":"@babel/types@7.0.0-beta.35","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-y9XT11CozHDgjWcTdxmhSj13rJVXpa5ZXwjjOiTedjaM0ba5ItqdS02t31EhPl7HtOWxsZkYCCUNrSfrOisA6w==","shasum":"cf933a9a9a38484ca724b335b88d83726d5ab960","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.35.tgz"},"maintainers":[{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.35.tgz_1513288077675_0.9689391618594527"},"directories":{}},"7.0.0-beta.36":{"name":"@babel/types","version":"7.0.0-beta.36","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.36","babylon":"7.0.0-beta.36"},"_id":"@babel/types@7.0.0-beta.36","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-PyAORDO9um9tfnrddXgmWN9e6Sq9qxraQIt5ynqBOSXKA5qvK1kUr+Q3nSzKFdzorsiK+oqcUnAFvEoKxv9D+Q==","shasum":"64f2004353de42adb72f9ebb4665fc35b5499d23","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.36.tgz"},"maintainers":[{"email":"james@henry.sc","name":"jameshenry"},{"email":"kent@doddsfamily.us","name":"kentcdodds"},{"email":"kaicataldo@gmail.com","name":"kaicataldo"},{"email":"teddy.katz@gmail.com","name":"not-an-aardvark"},{"email":"star.ctor@gmail.com","name":"mysticatea"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.36.tgz_1514228691995_0.5335837327875197"},"directories":{}},"7.0.0-beta.37":{"name":"@babel/types","version":"7.0.0-beta.37","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.37","babylon":"7.0.0-beta.37"},"_id":"@babel/types@7.0.0-beta.37","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-RLbDz5fUFULue678wqBu2MR3V9BBvu+ugAQitrJPFCjDhgwy/CKCbUg+yonpvKqOcYGvz54GdBpCoQoSMYK9UA==","shasum":"fa93af9aa9d85c331729bb923495af04d9b0617d","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.37.tgz"},"maintainers":[{"email":"contact@xtuc.fr","name":"xtuc"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.37.tgz_1515427359223_0.24704321892932057"},"directories":{}},"7.0.0-beta.38":{"name":"@babel/types","version":"7.0.0-beta.38","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.38","babylon":"7.0.0-beta.38"},"_id":"@babel/types@7.0.0-beta.38","_npmVersion":"5.5.1","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-SAtyEjmA7KiEoL2eAOAUM6M9arQJGWxJKK0S9x0WyPOosHS420RXoxPhn57u/8orRnK8Kxm0nHQQNTX203cP1Q==","shasum":"2ce2443f7dc6ad535a67db4940cbd34e64035a6f","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.38.tgz"},"maintainers":[{"email":"contact@xtuc.fr","name":"xtuc"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.38.tgz_1516206725516_0.5681764360051602"},"directories":{}},"7.0.0-beta.39":{"name":"@babel/types","version":"7.0.0-beta.39","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.39","babylon":"7.0.0-beta.39"},"_id":"@babel/types@7.0.0-beta.39","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-wrEe0z4kFP0KbFz8aHbPOGQal0gn+J2Iv9ZJGYbD77JN4BpavbF5l/BvLNZ0Omn665VENncoLVmQpclMbh64sQ==","shasum":"2ea0d97efe4781688751edc68cde640d6559938c","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.39.tgz"},"maintainers":[{"email":"mateuszburzynski@gmail.com","name":"andarist"},{"email":"contact@xtuc.fr","name":"xtuc"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"hi@henryzoo.com","name":"hzoo"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types-7.0.0-beta.39.tgz_1517344060355_0.6547915895935148"},"directories":{}},"7.0.0-beta.40":{"name":"@babel/types","version":"7.0.0-beta.40","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.40","babylon":"7.0.0-beta.40"},"_id":"@babel/types@7.0.0-beta.40","_npmVersion":"5.6.0","_nodeVersion":"8.9.1","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-uXCGCzTgMZxcSUzutCPtZmXbVC+cvENgS2e0tRuhn+Y1hZnMb8IHP0Trq7Q2MB/eFmG5pKrAeTIUfQIe5kA4Tg==","shasum":"25c3d7aae14126abe05fcb098c65a66b6d6b8c14","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.40.tgz","fileCount":86,"unpackedSize":581244},"maintainers":[{"email":"mateuszburzynski@gmail.com","name":"andarist"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types_7.0.0-beta.40_1518453710418_0.9606338540935242"}},"7.0.0-beta.41":{"name":"@babel/types","version":"7.0.0-beta.41","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.41","babylon":"7.0.0-beta.41"},"_id":"@babel/types@7.0.0-beta.41","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-q+Jf57E089a98CjAN5x0C5PAn7fqhVrEHTVAeVWHviyauASWgqff3F+t8migYEagnn5PcJ9lmtr5Mgmi3sV8PA==","shasum":"776e6ec154fb8ec11da697be35b705c6eeb00e75","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.41.tgz","fileCount":86,"unpackedSize":585979},"maintainers":[{"email":"mateuszburzynski@gmail.com","name":"andarist"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types_7.0.0-beta.41_1521044738037_0.1574821565136304"}},"7.0.0-beta.42":{"name":"@babel/types","version":"7.0.0-beta.42","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.42","babylon":"7.0.0-beta.42"},"_id":"@babel/types@7.0.0-beta.42","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-+pmpISmTHQqMMpHHtDLxcvtRhmn53bAxy8goJfHipS/uy/r3PLcuSdPizLW7DhtBWbtgIKZufLObfnIMoyMNsw==","shasum":"1e2118767684880f6963801b272fd2b3348efacc","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.42.tgz","fileCount":86,"unpackedSize":588759},"maintainers":[{"email":"mateuszburzynski@gmail.com","name":"andarist"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types_7.0.0-beta.42_1521147012822_0.1642209609936891"}},"7.0.0-beta.43":{"name":"@babel/types","version":"7.0.0-beta.43","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.43","babylon":"7.0.0-beta.43"},"_id":"@babel/types@7.0.0-beta.43","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-URKibaAMFKPb0Rm3xCOqLkiSCMNvm+7HWB73xY2wtv+Uwu5al8knrcRUzvPIXgIVZab1Ewt4vz9n8P7fDSiDRQ==","shasum":"9d82c2d773b6baec0474ddb774eafd7fb4511f8b","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.43.tgz","fileCount":86,"unpackedSize":548348},"maintainers":[{"email":"mateuszburzynski@gmail.com","name":"andarist"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types_7.0.0-beta.43_1522687683594_0.3295129193465849"}},"7.0.0-beta.44":{"name":"@babel/types","version":"7.0.0-beta.44","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.44","babylon":"7.0.0-beta.44"},"_id":"@babel/types@7.0.0-beta.44","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-5eTV4WRmqbaFM3v9gHAIljEQJU4Ssc6fxL61JN+Oe2ga/BwyjzjamwkCVVAQjHGuAX8i0BWo42dshL8eO5KfLQ==","shasum":"6b1b164591f77dec0a0342aca995f2d046b3a757","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.44.tgz","fileCount":86,"unpackedSize":596455},"maintainers":[{"email":"mateuszburzynski@gmail.com","name":"andarist"},{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types_7.0.0-beta.44_1522707587063_0.8920671545327745"}},"7.0.0-beta.45":{"name":"@babel/types","version":"7.0.0-beta.45","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.45","babylon":"7.0.0-beta.45"},"_id":"@babel/types@7.0.0-beta.45","_npmVersion":"5.6.0","_nodeVersion":"8.10.0","_npmUser":{"name":"hzoo","email":"hi@henryzoo.com"},"dist":{"integrity":"sha512-I4uHHpgZQZ91BtTqMP5CqMd0nqMHX45m3fEcyLst5kPGjgojZ3TyJXifANwHk+I0+5B9bcJTwkTXhgE/cXSqIA==","shasum":"27dae79ac324be3a82b686ec6e302b7ab6a2bb76","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.45.tgz","fileCount":86,"unpackedSize":664399,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3T0XCRA9TVsSAnZWagAADFcP/A28Rtx0icvYSCIq4eV1\njJnW2WiCi+UQHSFyL0ko6Y9SB6LcyF+J5VZSSV5gCJL6Bn3gwO0ieSjwUCb2\n43nf0iG1lO6NG+2oVPI+waXWrtPHPoS2zzdObnMJHjYNnctGOp6a7bXYRrOs\ne+PJiXc7FkC9h5WQUB1yP+nKCN6sv2uNuqLZzuufWvSLQHMq71GVFY6Omw8n\n+BJrgCTUFIKcUHu08jFCbhVv/y+tbMkrXEuQR3MfTlXC1J6erreY/cWVQuEM\nG6TrP20gM1jk/jK1Zk/XSR/oDTk85u5Be0WHqu351JW03jERDDjw/7d2xFSo\n36JT0o4/GczGZKDZY3ZnDt2fgI3cwvRYVALCJ4Puhz0GvrGqGR0/lc9xPM1q\noc8b83WSIj/6t8aNsBjE5SQvXcT64wYe8I9DsByu0gtLYwnOe5Pl2V1ZJBIM\nofE5Jy/iwT/jgbkY1AejcQWIpRF2zGq9i+qojNJYBhj4zG8JY9QwosKIQDOR\nyQkKQX6MrpEUofKG7txR9ygyd0lEvjZaXHOgy4N/OBMQNH5OuRAj8yERpT7b\nQS3rifHhTeLClaxma2RWkdtAUhh1fP+imfm2MjPdvPMlG7ePQfabKkTDhhG6\n0GBEnaQ/c4Nq2VcQEd/wErvRAehlhCqxwQ0a4MsslM5bbRKJI7E82/bFspsU\nKga4\r\n=KL0w\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types_7.0.0-beta.45_1524448534048_0.15902637175123213"}},"7.0.0-beta.46":{"name":"@babel/types","version":"7.0.0-beta.46","description":"Babel Types is a Lodash-esque utility library for AST nodes","author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"homepage":"https://babeljs.io/","license":"MIT","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"main":"lib/index.js","types":"lib/index.d.ts","dependencies":{"esutils":"^2.0.2","lodash":"^4.2.0","to-fast-properties":"^2.0.0"},"devDependencies":{"@babel/generator":"7.0.0-beta.46","babylon":"7.0.0-beta.46"},"_id":"@babel/types@7.0.0-beta.46","_npmVersion":"5.6.0","_nodeVersion":"9.4.0","_npmUser":{"name":"loganfsmyth","email":"loganfsmyth@gmail.com"},"dist":{"integrity":"sha512-uA5aruF2KKsJxToWdDpftsrPOIQtoGrGno2hiaeO9JRvfT9xZdK11nPoC+/RF9emNzmNbWn4HCRdCY+McT5Nbw==","shasum":"eb84399a699af9fcb244440cce78e1acbeb40e0c","tarball":"https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.46.tgz","fileCount":86,"unpackedSize":664399,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa3WFHCRA9TVsSAnZWagAAU2sP/RMK3I0BUxajFzBB8GN8\nj+zsMdlVZYebVarCObKL/pb5lv1sb/iPDjGEV5FYVnDYckex4gtbznk0DS+/\nCJxzox/D4vOno6jIzvauXVI7gnOg01WjwXQUHIHIHSJ1k5O2YmXzYdVbLB0S\nYorSNEQKuUOMzFNfmb1beJL6u+PzG4zcCc9VdPdYYAugVZN3XsEFWEFeJTDd\nSLRpEBm+u/v8sCk77l9PgUMxLAx+hjGS/WB6yQ373tr4EkLal9eQJpeZXRYN\nwAOupChzvEqA59NdSupAs3EkVzfv8nz7QwawNr30nODGrLyaqFvwbN3LDQXH\nyj7hlSyrQZwn1+ShWIgiomxshNPLpudFdYyHZxBmb0nuyFGfbgia/jNtx1ve\n4aV/r615s1770iRBSu5MAXW1Pjnn1PNskSkuJkos93Cuy0weko9IisLDN9u8\nE2aHU2AgZNMkMPsol1eXR3OINeW3lSR0fajicHNJUwGkXVOyRFR8RFsEq/eb\n8cLRH99NPVnDtbTQRI/Npk+7Xmvwf1S8C2yYj1xAaKB3/A+92ZK1+0Lneb2U\n+X2MQUdm5hApGetvezNeYqwW6u5LgHKF4qFdZ5Gmk8QdEflY9qdMyO87+2SZ\nQvIQqBF2JQMTO+usCsSG2ucA6BYw8FlnBQXde4x26af3Pe1XqtmxcYePFmN+\nO9ez\r\n=uZEU\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/types_7.0.0-beta.46_1524457798598_0.912013201889122"}}},"readme":"# @babel/types\n\n> This module contains methods for building ASTs manually and for checking the types of AST nodes.\n\n## Install\n\n```sh\nnpm install --save-dev @babel/types\n```\n\n## API\n### anyTypeAnnotation\n```javascript\nt.anyTypeAnnotation()\n```\n\nSee also `t.isAnyTypeAnnotation(node, opts)` and `t.assertAnyTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### arrayExpression\n```javascript\nt.arrayExpression(elements)\n```\n\nSee also `t.isArrayExpression(node, opts)` and `t.assertArrayExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `elements`: `Array<null | Expression | SpreadElement>` (default: `[]`)\n\n---\n\n### arrayPattern\n```javascript\nt.arrayPattern(elements)\n```\n\nSee also `t.isArrayPattern(node, opts)` and `t.assertArrayPattern(node, opts)`.\n\nAliases: `Pattern`, `PatternLike`, `LVal`\n\n - `elements`: `Array<PatternLike>` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### arrayTypeAnnotation\n```javascript\nt.arrayTypeAnnotation(elementType)\n```\n\nSee also `t.isArrayTypeAnnotation(node, opts)` and `t.assertArrayTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `elementType`: `FlowType` (required)\n\n---\n\n### arrowFunctionExpression\n```javascript\nt.arrowFunctionExpression(params, body, async)\n```\n\nSee also `t.isArrowFunctionExpression(node, opts)` and `t.assertArrowFunctionExpression(node, opts)`.\n\nAliases: `Scopable`, `Function`, `BlockParent`, `FunctionParent`, `Expression`, `Pureish`\n\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement | Expression` (required)\n - `async`: `boolean` (default: `false`)\n - `expression`: `boolean` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### assignmentExpression\n```javascript\nt.assignmentExpression(operator, left, right)\n```\n\nSee also `t.isAssignmentExpression(node, opts)` and `t.assertAssignmentExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `operator`: `string` (required)\n - `left`: `LVal` (required)\n - `right`: `Expression` (required)\n\n---\n\n### assignmentPattern\n```javascript\nt.assignmentPattern(left, right)\n```\n\nSee also `t.isAssignmentPattern(node, opts)` and `t.assertAssignmentPattern(node, opts)`.\n\nAliases: `Pattern`, `PatternLike`, `LVal`\n\n - `left`: `Identifier | ObjectPattern | ArrayPattern` (required)\n - `right`: `Expression` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### awaitExpression\n```javascript\nt.awaitExpression(argument)\n```\n\nSee also `t.isAwaitExpression(node, opts)` and `t.assertAwaitExpression(node, opts)`.\n\nAliases: `Expression`, `Terminatorless`\n\n - `argument`: `Expression` (required)\n\n---\n\n### binaryExpression\n```javascript\nt.binaryExpression(operator, left, right)\n```\n\nSee also `t.isBinaryExpression(node, opts)` and `t.assertBinaryExpression(node, opts)`.\n\nAliases: `Binary`, `Expression`\n\n - `operator`: `\"+\" | \"-\" | \"/\" | \"%\" | \"*\" | \"**\" | \"&\" | \"|\" | \">>\" | \">>>\" | \"<<\" | \"^\" | \"==\" | \"===\" | \"!=\" | \"!==\" | \"in\" | \"instanceof\" | \">\" | \"<\" | \">=\" | \"<=\"` (required)\n - `left`: `Expression` (required)\n - `right`: `Expression` (required)\n\n---\n\n### bindExpression\n```javascript\nt.bindExpression(object, callee)\n```\n\nSee also `t.isBindExpression(node, opts)` and `t.assertBindExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `object` (required)\n - `callee` (required)\n\n---\n\n### blockStatement\n```javascript\nt.blockStatement(body, directives)\n```\n\nSee also `t.isBlockStatement(node, opts)` and `t.assertBlockStatement(node, opts)`.\n\nAliases: `Scopable`, `BlockParent`, `Block`, `Statement`\n\n - `body`: `Array<Statement>` (required)\n - `directives`: `Array<Directive>` (default: `[]`)\n\n---\n\n### booleanLiteral\n```javascript\nt.booleanLiteral(value)\n```\n\nSee also `t.isBooleanLiteral(node, opts)` and `t.assertBooleanLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n - `value`: `boolean` (required)\n\n---\n\n### booleanLiteralTypeAnnotation\n```javascript\nt.booleanLiteralTypeAnnotation(value)\n```\n\nSee also `t.isBooleanLiteralTypeAnnotation(node, opts)` and `t.assertBooleanLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `value`: `boolean` (required)\n\n---\n\n### booleanTypeAnnotation\n```javascript\nt.booleanTypeAnnotation()\n```\n\nSee also `t.isBooleanTypeAnnotation(node, opts)` and `t.assertBooleanTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### breakStatement\n```javascript\nt.breakStatement(label)\n```\n\nSee also `t.isBreakStatement(node, opts)` and `t.assertBreakStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `label`: `Identifier` (default: `null`)\n\n---\n\n### callExpression\n```javascript\nt.callExpression(callee, arguments)\n```\n\nSee also `t.isCallExpression(node, opts)` and `t.assertCallExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `callee`: `Expression` (required)\n - `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName>` (required)\n - `optional`: `true | false` (default: `null`)\n - `typeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`)\n\n---\n\n### catchClause\n```javascript\nt.catchClause(param, body)\n```\n\nSee also `t.isCatchClause(node, opts)` and `t.assertCatchClause(node, opts)`.\n\nAliases: `Scopable`, `BlockParent`\n\n - `param`: `Identifier` (default: `null`)\n - `body`: `BlockStatement` (required)\n\n---\n\n### classBody\n```javascript\nt.classBody(body)\n```\n\nSee also `t.isClassBody(node, opts)` and `t.assertClassBody(node, opts)`.\n\n - `body`: `Array<ClassMethod | ClassProperty | ClassPrivateProperty | TSDeclareMethod | TSIndexSignature>` (required)\n\n---\n\n### classDeclaration\n```javascript\nt.classDeclaration(id, superClass, body, decorators)\n```\n\nSee also `t.isClassDeclaration(node, opts)` and `t.assertClassDeclaration(node, opts)`.\n\nAliases: `Scopable`, `Class`, `Statement`, `Declaration`, `Pureish`\n\n - `id`: `Identifier` (default: `null`)\n - `superClass`: `Expression` (default: `null`)\n - `body`: `ClassBody` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `abstract`: `boolean` (default: `null`)\n - `declare`: `boolean` (default: `null`)\n - `implements`: `Array<TSExpressionWithTypeArguments | ClassImplements>` (default: `null`)\n - `mixins` (default: `null`)\n - `superTypeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### classExpression\n```javascript\nt.classExpression(id, superClass, body, decorators)\n```\n\nSee also `t.isClassExpression(node, opts)` and `t.assertClassExpression(node, opts)`.\n\nAliases: `Scopable`, `Class`, `Expression`, `Pureish`\n\n - `id`: `Identifier` (default: `null`)\n - `superClass`: `Expression` (default: `null`)\n - `body`: `ClassBody` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `implements`: `Array<TSExpressionWithTypeArguments | ClassImplements>` (default: `null`)\n - `mixins` (default: `null`)\n - `superTypeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### classImplements\n```javascript\nt.classImplements(id, typeParameters)\n```\n\nSee also `t.isClassImplements(node, opts)` and `t.assertClassImplements(node, opts)`.\n\nAliases: `Flow`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\n---\n\n### classMethod\n```javascript\nt.classMethod(kind, key, params, body, computed, static)\n```\n\nSee also `t.isClassMethod(node, opts)` and `t.assertClassMethod(node, opts)`.\n\nAliases: `Function`, `Scopable`, `BlockParent`, `FunctionParent`, `Method`\n\n - `kind`: `\"get\" | \"set\" | \"method\" | \"constructor\"` (default: `'method'`)\n - `key`: if computed then `Expression` else `Identifier | Literal` (required)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `computed`: `boolean` (default: `false`)\n - `static`: `boolean` (default: `null`)\n - `abstract`: `boolean` (default: `null`)\n - `access`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `async`: `boolean` (default: `false`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n - `optional`: `boolean` (default: `null`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### classPrivateProperty\n```javascript\nt.classPrivateProperty(key, value)\n```\n\nSee also `t.isClassPrivateProperty(node, opts)` and `t.assertClassPrivateProperty(node, opts)`.\n\nAliases: `Property`, `Private`\n\n - `key`: `PrivateName` (required)\n - `value`: `Expression` (default: `null`)\n\n---\n\n### classProperty\n```javascript\nt.classProperty(key, value, typeAnnotation, decorators, computed)\n```\n\nSee also `t.isClassProperty(node, opts)` and `t.assertClassProperty(node, opts)`.\n\nAliases: `Property`\n\n - `key`: `Identifier | StringLiteral | NumericLiteral | Expression` (required)\n - `value`: `Expression` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `computed`: `boolean` (default: `false`)\n - `abstract`: `boolean` (default: `null`)\n - `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `definite`: `boolean` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n - `static`: `boolean` (default: `null`)\n\n---\n\n### conditionalExpression\n```javascript\nt.conditionalExpression(test, consequent, alternate)\n```\n\nSee also `t.isConditionalExpression(node, opts)` and `t.assertConditionalExpression(node, opts)`.\n\nAliases: `Expression`, `Conditional`\n\n - `test`: `Expression` (required)\n - `consequent`: `Expression` (required)\n - `alternate`: `Expression` (required)\n\n---\n\n### continueStatement\n```javascript\nt.continueStatement(label)\n```\n\nSee also `t.isContinueStatement(node, opts)` and `t.assertContinueStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `label`: `Identifier` (default: `null`)\n\n---\n\n### debuggerStatement\n```javascript\nt.debuggerStatement()\n```\n\nSee also `t.isDebuggerStatement(node, opts)` and `t.assertDebuggerStatement(node, opts)`.\n\nAliases: `Statement`\n\n\n---\n\n### declareClass\n```javascript\nt.declareClass(id, typeParameters, extends, body)\n```\n\nSee also `t.isDeclareClass(node, opts)` and `t.assertDeclareClass(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n - `extends`: `Array<InterfaceExtends>` (default: `null`)\n - `body`: `ObjectTypeAnnotation` (required)\n - `implements`: `Array<ClassImplements>` (default: `null`)\n - `mixins`: `Array<InterfaceExtends>` (default: `null`)\n\n---\n\n### declareExportAllDeclaration\n```javascript\nt.declareExportAllDeclaration(source)\n```\n\nSee also `t.isDeclareExportAllDeclaration(node, opts)` and `t.assertDeclareExportAllDeclaration(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `source`: `StringLiteral` (required)\n - `exportKind`: `[\"type\",\"value\"]` (default: `null`)\n\n---\n\n### declareExportDeclaration\n```javascript\nt.declareExportDeclaration(declaration, specifiers, source)\n```\n\nSee also `t.isDeclareExportDeclaration(node, opts)` and `t.assertDeclareExportDeclaration(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `declaration`: `Flow` (default: `null`)\n - `specifiers`: `Array<ExportSpecifier | ExportNamespaceSpecifier>` (default: `null`)\n - `source`: `StringLiteral` (default: `null`)\n - `default`: `boolean` (default: `null`)\n\n---\n\n### declareFunction\n```javascript\nt.declareFunction(id)\n```\n\nSee also `t.isDeclareFunction(node, opts)` and `t.assertDeclareFunction(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `predicate`: `DeclaredPredicate` (default: `null`)\n\n---\n\n### declareInterface\n```javascript\nt.declareInterface(id, typeParameters, extends, body)\n```\n\nSee also `t.isDeclareInterface(node, opts)` and `t.assertDeclareInterface(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `extends`: `Array<InterfaceExtends>` (default: `null`)\n - `body`: `ObjectTypeAnnotation` (required)\n - `implements`: `Array<ClassImplements>` (default: `null`)\n - `mixins`: `Array<InterfaceExtends>` (default: `null`)\n\n---\n\n### declareModule\n```javascript\nt.declareModule(id, body, kind)\n```\n\nSee also `t.isDeclareModule(node, opts)` and `t.assertDeclareModule(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier | StringLiteral` (required)\n - `body`: `BlockStatement` (required)\n - `kind`: `\"CommonJS\" | \"ES\"` (default: `null`)\n\n---\n\n### declareModuleExports\n```javascript\nt.declareModuleExports(typeAnnotation)\n```\n\nSee also `t.isDeclareModuleExports(node, opts)` and `t.assertDeclareModuleExports(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `typeAnnotation`: `TypeAnnotation` (required)\n\n---\n\n### declareOpaqueType\n```javascript\nt.declareOpaqueType(id, typeParameters, supertype)\n```\n\nSee also `t.isDeclareOpaqueType(node, opts)` and `t.assertDeclareOpaqueType(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `supertype`: `FlowType` (default: `null`)\n\n---\n\n### declareTypeAlias\n```javascript\nt.declareTypeAlias(id, typeParameters, right)\n```\n\nSee also `t.isDeclareTypeAlias(node, opts)` and `t.assertDeclareTypeAlias(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `right`: `FlowType` (required)\n\n---\n\n### declareVariable\n```javascript\nt.declareVariable(id)\n```\n\nSee also `t.isDeclareVariable(node, opts)` and `t.assertDeclareVariable(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n\n---\n\n### declaredPredicate\n```javascript\nt.declaredPredicate(value)\n```\n\nSee also `t.isDeclaredPredicate(node, opts)` and `t.assertDeclaredPredicate(node, opts)`.\n\nAliases: `Flow`, `FlowPredicate`\n\n - `value`: `Flow` (required)\n\n---\n\n### decorator\n```javascript\nt.decorator(callee, arguments)\n```\n\nSee also `t.isDecorator(node, opts)` and `t.assertDecorator(node, opts)`.\n\n - `callee`: `Expression` (required)\n - `arguments`: `Array<Expression | SpreadElement>` (default: `null`)\n\n---\n\n### directive\n```javascript\nt.directive(value)\n```\n\nSee also `t.isDirective(node, opts)` and `t.assertDirective(node, opts)`.\n\n - `value`: `DirectiveLiteral` (required)\n\n---\n\n### directiveLiteral\n```javascript\nt.directiveLiteral(value)\n```\n\nSee also `t.isDirectiveLiteral(node, opts)` and `t.assertDirectiveLiteral(node, opts)`.\n\n - `value`: `string` (required)\n\n---\n\n### doExpression\n```javascript\nt.doExpression(body)\n```\n\nSee also `t.isDoExpression(node, opts)` and `t.assertDoExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `body`: `BlockStatement` (required)\n\n---\n\n### doWhileStatement\n```javascript\nt.doWhileStatement(test, body)\n```\n\nSee also `t.isDoWhileStatement(node, opts)` and `t.assertDoWhileStatement(node, opts)`.\n\nAliases: `Statement`, `BlockParent`, `Loop`, `While`, `Scopable`\n\n - `test`: `Expression` (required)\n - `body`: `Statement` (required)\n\n---\n\n### emptyStatement\n```javascript\nt.emptyStatement()\n```\n\nSee also `t.isEmptyStatement(node, opts)` and `t.assertEmptyStatement(node, opts)`.\n\nAliases: `Statement`\n\n\n---\n\n### emptyTypeAnnotation\n```javascript\nt.emptyTypeAnnotation()\n```\n\nSee also `t.isEmptyTypeAnnotation(node, opts)` and `t.assertEmptyTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### existsTypeAnnotation\n```javascript\nt.existsTypeAnnotation()\n```\n\nSee also `t.isExistsTypeAnnotation(node, opts)` and `t.assertExistsTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n\n---\n\n### exportAllDeclaration\n```javascript\nt.exportAllDeclaration(source)\n```\n\nSee also `t.isExportAllDeclaration(node, opts)` and `t.assertExportAllDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`, `ExportDeclaration`\n\n - `source`: `StringLiteral` (required)\n\n---\n\n### exportDefaultDeclaration\n```javascript\nt.exportDefaultDeclaration(declaration)\n```\n\nSee also `t.isExportDefaultDeclaration(node, opts)` and `t.assertExportDefaultDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`, `ExportDeclaration`\n\n - `declaration`: `FunctionDeclaration | TSDeclareFunction | ClassDeclaration | Expression` (required)\n\n---\n\n### exportDefaultSpecifier\n```javascript\nt.exportDefaultSpecifier(exported)\n```\n\nSee also `t.isExportDefaultSpecifier(node, opts)` and `t.assertExportDefaultSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `exported`: `Identifier` (required)\n\n---\n\n### exportNamedDeclaration\n```javascript\nt.exportNamedDeclaration(declaration, specifiers, source)\n```\n\nSee also `t.isExportNamedDeclaration(node, opts)` and `t.assertExportNamedDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`, `ExportDeclaration`\n\n - `declaration`: `Declaration` (default: `null`)\n - `specifiers`: `Array<ExportSpecifier | ExportDefaultSpecifier | ExportNamespaceSpecifier>` (required)\n - `source`: `StringLiteral` (default: `null`)\n\n---\n\n### exportNamespaceSpecifier\n```javascript\nt.exportNamespaceSpecifier(exported)\n```\n\nSee also `t.isExportNamespaceSpecifier(node, opts)` and `t.assertExportNamespaceSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `exported`: `Identifier` (required)\n\n---\n\n### exportSpecifier\n```javascript\nt.exportSpecifier(local, exported)\n```\n\nSee also `t.isExportSpecifier(node, opts)` and `t.assertExportSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n - `exported`: `Identifier` (required)\n\n---\n\n### expressionStatement\n```javascript\nt.expressionStatement(expression)\n```\n\nSee also `t.isExpressionStatement(node, opts)` and `t.assertExpressionStatement(node, opts)`.\n\nAliases: `Statement`, `ExpressionWrapper`\n\n - `expression`: `Expression` (required)\n\n---\n\n### file\n```javascript\nt.file(program, comments, tokens)\n```\n\nSee also `t.isFile(node, opts)` and `t.assertFile(node, opts)`.\n\n - `program`: `Program` (required)\n - `comments` (required)\n - `tokens` (required)\n\n---\n\n### forInStatement\n```javascript\nt.forInStatement(left, right, body)\n```\n\nSee also `t.isForInStatement(node, opts)` and `t.assertForInStatement(node, opts)`.\n\nAliases: `Scopable`, `Statement`, `For`, `BlockParent`, `Loop`, `ForXStatement`\n\n - `left`: `VariableDeclaration | LVal` (required)\n - `right`: `Expression` (required)\n - `body`: `Statement` (required)\n\n---\n\n### forOfStatement\n```javascript\nt.forOfStatement(left, right, body)\n```\n\nSee also `t.isForOfStatement(node, opts)` and `t.assertForOfStatement(node, opts)`.\n\nAliases: `Scopable`, `Statement`, `For`, `BlockParent`, `Loop`, `ForXStatement`\n\n - `left`: `VariableDeclaration | LVal` (required)\n - `right`: `Expression` (required)\n - `body`: `Statement` (required)\n - `await`: `boolean` (default: `false`)\n\n---\n\n### forStatement\n```javascript\nt.forStatement(init, test, update, body)\n```\n\nSee also `t.isForStatement(node, opts)` and `t.assertForStatement(node, opts)`.\n\nAliases: `Scopable`, `Statement`, `For`, `BlockParent`, `Loop`\n\n - `init`: `VariableDeclaration | Expression` (default: `null`)\n - `test`: `Expression` (default: `null`)\n - `update`: `Expression` (default: `null`)\n - `body`: `Statement` (required)\n\n---\n\n### functionDeclaration\n```javascript\nt.functionDeclaration(id, params, body, generator, async)\n```\n\nSee also `t.isFunctionDeclaration(node, opts)` and `t.assertFunctionDeclaration(node, opts)`.\n\nAliases: `Scopable`, `Function`, `BlockParent`, `FunctionParent`, `Statement`, `Pureish`, `Declaration`\n\n - `id`: `Identifier` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `generator`: `boolean` (default: `false`)\n - `async`: `boolean` (default: `false`)\n - `declare`: `boolean` (default: `null`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### functionExpression\n```javascript\nt.functionExpression(id, params, body, generator, async)\n```\n\nSee also `t.isFunctionExpression(node, opts)` and `t.assertFunctionExpression(node, opts)`.\n\nAliases: `Scopable`, `Function`, `BlockParent`, `FunctionParent`, `Expression`, `Pureish`\n\n - `id`: `Identifier` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `generator`: `boolean` (default: `false`)\n - `async`: `boolean` (default: `false`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### functionTypeAnnotation\n```javascript\nt.functionTypeAnnotation(typeParameters, params, rest, returnType)\n```\n\nSee also `t.isFunctionTypeAnnotation(node, opts)` and `t.assertFunctionTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `params`: `Array<FunctionTypeParam>` (required)\n - `rest`: `FunctionTypeParam` (default: `null`)\n - `returnType`: `FlowType` (required)\n\n---\n\n### functionTypeParam\n```javascript\nt.functionTypeParam(name, typeAnnotation)\n```\n\nSee also `t.isFunctionTypeParam(node, opts)` and `t.assertFunctionTypeParam(node, opts)`.\n\nAliases: `Flow`\n\n - `name`: `Identifier` (default: `null`)\n - `typeAnnotation`: `FlowType` (required)\n - `optional`: `boolean` (default: `null`)\n\n---\n\n### genericTypeAnnotation\n```javascript\nt.genericTypeAnnotation(id, typeParameters)\n```\n\nSee also `t.isGenericTypeAnnotation(node, opts)` and `t.assertGenericTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\n---\n\n### identifier\n```javascript\nt.identifier(name)\n```\n\nSee also `t.isIdentifier(node, opts)` and `t.assertIdentifier(node, opts)`.\n\nAliases: `Expression`, `PatternLike`, `LVal`, `TSEntityName`\n\n - `name`: `string` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### ifStatement\n```javascript\nt.ifStatement(test, consequent, alternate)\n```\n\nSee also `t.isIfStatement(node, opts)` and `t.assertIfStatement(node, opts)`.\n\nAliases: `Statement`, `Conditional`\n\n - `test`: `Expression` (required)\n - `consequent`: `Statement` (required)\n - `alternate`: `Statement` (default: `null`)\n\n---\n\n### import\n```javascript\nt.import()\n```\n\nSee also `t.isImport(node, opts)` and `t.assertImport(node, opts)`.\n\nAliases: `Expression`\n\n\n---\n\n### importDeclaration\n```javascript\nt.importDeclaration(specifiers, source)\n```\n\nSee also `t.isImportDeclaration(node, opts)` and `t.assertImportDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`\n\n - `specifiers`: `Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>` (required)\n - `source`: `StringLiteral` (required)\n\n---\n\n### importDefaultSpecifier\n```javascript\nt.importDefaultSpecifier(local)\n```\n\nSee also `t.isImportDefaultSpecifier(node, opts)` and `t.assertImportDefaultSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n\n---\n\n### importNamespaceSpecifier\n```javascript\nt.importNamespaceSpecifier(local)\n```\n\nSee also `t.isImportNamespaceSpecifier(node, opts)` and `t.assertImportNamespaceSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n\n---\n\n### importSpecifier\n```javascript\nt.importSpecifier(local, imported)\n```\n\nSee also `t.isImportSpecifier(node, opts)` and `t.assertImportSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n - `imported`: `Identifier` (required)\n - `importKind`: `null | \"type\" | \"typeof\"` (default: `null`)\n\n---\n\n### inferredPredicate\n```javascript\nt.inferredPredicate()\n```\n\nSee also `t.isInferredPredicate(node, opts)` and `t.assertInferredPredicate(node, opts)`.\n\nAliases: `Flow`, `FlowPredicate`\n\n\n---\n\n### interfaceDeclaration\n```javascript\nt.interfaceDeclaration(id, typeParameters, extends, body)\n```\n\nSee also `t.isInterfaceDeclaration(node, opts)` and `t.assertInterfaceDeclaration(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `extends`: `Array<InterfaceExtends>` (default: `null`)\n - `body`: `ObjectTypeAnnotation` (required)\n - `implements`: `Array<ClassImplements>` (default: `null`)\n - `mixins`: `Array<InterfaceExtends>` (default: `null`)\n\n---\n\n### interfaceExtends\n```javascript\nt.interfaceExtends(id, typeParameters)\n```\n\nSee also `t.isInterfaceExtends(node, opts)` and `t.assertInterfaceExtends(node, opts)`.\n\nAliases: `Flow`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\n---\n\n### intersectionTypeAnnotation\n```javascript\nt.intersectionTypeAnnotation(types)\n```\n\nSee also `t.isIntersectionTypeAnnotation(node, opts)` and `t.assertIntersectionTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `types`: `Array<FlowType>` (required)\n\n---\n\n### jSXAttribute\n```javascript\nt.jsxAttribute(name, value)\n```\n\nSee also `t.isJSXAttribute(node, opts)` and `t.assertJSXAttribute(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `name`: `JSXIdentifier | JSXNamespacedName` (required)\n - `value`: `JSXElement | JSXFragment | StringLiteral | JSXExpressionContainer` (default: `null`)\n\n---\n\n### jSXClosingElement\n```javascript\nt.jsxClosingElement(name)\n```\n\nSee also `t.isJSXClosingElement(node, opts)` and `t.assertJSXClosingElement(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `name`: `JSXIdentifier | JSXMemberExpression` (required)\n\n---\n\n### jSXClosingFragment\n```javascript\nt.jsxClosingFragment()\n```\n\nSee also `t.isJSXClosingFragment(node, opts)` and `t.assertJSXClosingFragment(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n\n---\n\n### jSXElement\n```javascript\nt.jsxElement(openingElement, closingElement, children, selfClosing)\n```\n\nSee also `t.isJSXElement(node, opts)` and `t.assertJSXElement(node, opts)`.\n\nAliases: `JSX`, `Immutable`, `Expression`\n\n - `openingElement`: `JSXOpeningElement` (required)\n - `closingElement`: `JSXClosingElement` (default: `null`)\n - `children`: `Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>` (required)\n - `selfClosing` (required)\n\n---\n\n### jSXEmptyExpression\n```javascript\nt.jsxEmptyExpression()\n```\n\nSee also `t.isJSXEmptyExpression(node, opts)` and `t.assertJSXEmptyExpression(node, opts)`.\n\nAliases: `JSX`\n\n\n---\n\n### jSXExpressionContainer\n```javascript\nt.jsxExpressionContainer(expression)\n```\n\nSee also `t.isJSXExpressionContainer(node, opts)` and `t.assertJSXExpressionContainer(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `expression`: `Expression` (required)\n\n---\n\n### jSXFragment\n```javascript\nt.jsxFragment(openingFragment, closingFragment, children)\n```\n\nSee also `t.isJSXFragment(node, opts)` and `t.assertJSXFragment(node, opts)`.\n\nAliases: `JSX`, `Immutable`, `Expression`\n\n - `openingFragment`: `JSXOpeningFragment` (required)\n - `closingFragment`: `JSXClosingFragment` (required)\n - `children`: `Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>` (required)\n\n---\n\n### jSXIdentifier\n```javascript\nt.jsxIdentifier(name)\n```\n\nSee also `t.isJSXIdentifier(node, opts)` and `t.assertJSXIdentifier(node, opts)`.\n\nAliases: `JSX`\n\n - `name`: `string` (required)\n\n---\n\n### jSXMemberExpression\n```javascript\nt.jsxMemberExpression(object, property)\n```\n\nSee also `t.isJSXMemberExpression(node, opts)` and `t.assertJSXMemberExpression(node, opts)`.\n\nAliases: `JSX`\n\n - `object`: `JSXMemberExpression | JSXIdentifier` (required)\n - `property`: `JSXIdentifier` (required)\n\n---\n\n### jSXNamespacedName\n```javascript\nt.jsxNamespacedName(namespace, name)\n```\n\nSee also `t.isJSXNamespacedName(node, opts)` and `t.assertJSXNamespacedName(node, opts)`.\n\nAliases: `JSX`\n\n - `namespace`: `JSXIdentifier` (required)\n - `name`: `JSXIdentifier` (required)\n\n---\n\n### jSXOpeningElement\n```javascript\nt.jsxOpeningElement(name, attributes, selfClosing)\n```\n\nSee also `t.isJSXOpeningElement(node, opts)` and `t.assertJSXOpeningElement(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `name`: `JSXIdentifier | JSXMemberExpression` (required)\n - `attributes`: `Array<JSXAttribute | JSXSpreadAttribute>` (required)\n - `selfClosing`: `boolean` (default: `false`)\n\n---\n\n### jSXOpeningFragment\n```javascript\nt.jsxOpeningFragment()\n```\n\nSee also `t.isJSXOpeningFragment(node, opts)` and `t.assertJSXOpeningFragment(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n\n---\n\n### jSXSpreadAttribute\n```javascript\nt.jsxSpreadAttribute(argument)\n```\n\nSee also `t.isJSXSpreadAttribute(node, opts)` and `t.assertJSXSpreadAttribute(node, opts)`.\n\nAliases: `JSX`\n\n - `argument`: `Expression` (required)\n\n---\n\n### jSXSpreadChild\n```javascript\nt.jsxSpreadChild(expression)\n```\n\nSee also `t.isJSXSpreadChild(node, opts)` and `t.assertJSXSpreadChild(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `expression`: `Expression` (required)\n\n---\n\n### jSXText\n```javascript\nt.jsxText(value)\n```\n\nSee also `t.isJSXText(node, opts)` and `t.assertJSXText(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `value`: `string` (required)\n\n---\n\n### labeledStatement\n```javascript\nt.labeledStatement(label, body)\n```\n\nSee also `t.isLabeledStatement(node, opts)` and `t.assertLabeledStatement(node, opts)`.\n\nAliases: `Statement`\n\n - `label`: `Identifier` (required)\n - `body`: `Statement` (required)\n\n---\n\n### logicalExpression\n```javascript\nt.logicalExpression(operator, left, right)\n```\n\nSee also `t.isLogicalExpression(node, opts)` and `t.assertLogicalExpression(node, opts)`.\n\nAliases: `Binary`, `Expression`\n\n - `operator`: `\"||\" | \"&&\" | \"??\"` (required)\n - `left`: `Expression` (required)\n - `right`: `Expression` (required)\n\n---\n\n### memberExpression\n```javascript\nt.memberExpression(object, property, computed, optional)\n```\n\nSee also `t.isMemberExpression(node, opts)` and `t.assertMemberExpression(node, opts)`.\n\nAliases: `Expression`, `LVal`\n\n - `object`: `Expression` (required)\n - `property`: if computed then `Expression` else `Identifier` (required)\n - `computed`: `boolean` (default: `false`)\n - `optional`: `true | false` (default: `null`)\n\n---\n\n### metaProperty\n```javascript\nt.metaProperty(meta, property)\n```\n\nSee also `t.isMetaProperty(node, opts)` and `t.assertMetaProperty(node, opts)`.\n\nAliases: `Expression`\n\n - `meta`: `Identifier` (required)\n - `property`: `Identifier` (required)\n\n---\n\n### mixedTypeAnnotation\n```javascript\nt.mixedTypeAnnotation()\n```\n\nSee also `t.isMixedTypeAnnotation(node, opts)` and `t.assertMixedTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### newExpression\n```javascript\nt.newExpression(callee, arguments)\n```\n\nSee also `t.isNewExpression(node, opts)` and `t.assertNewExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `callee`: `Expression` (required)\n - `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName>` (required)\n - `optional`: `true | false` (default: `null`)\n - `typeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`)\n\n---\n\n### noop\n```javascript\nt.noop()\n```\n\nSee also `t.isNoop(node, opts)` and `t.assertNoop(node, opts)`.\n\n\n---\n\n### nullLiteral\n```javascript\nt.nullLiteral()\n```\n\nSee also `t.isNullLiteral(node, opts)` and `t.assertNullLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n\n---\n\n### nullLiteralTypeAnnotation\n```javascript\nt.nullLiteralTypeAnnotation()\n```\n\nSee also `t.isNullLiteralTypeAnnotation(node, opts)` and `t.assertNullLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### nullableTypeAnnotation\n```javascript\nt.nullableTypeAnnotation(typeAnnotation)\n```\n\nSee also `t.isNullableTypeAnnotation(node, opts)` and `t.assertNullableTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `typeAnnotation`: `FlowType` (required)\n\n---\n\n### numberLiteralTypeAnnotation\n```javascript\nt.numberLiteralTypeAnnotation(value)\n```\n\nSee also `t.isNumberLiteralTypeAnnotation(node, opts)` and `t.assertNumberLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `value`: `number` (required)\n\n---\n\n### numberTypeAnnotation\n```javascript\nt.numberTypeAnnotation()\n```\n\nSee also `t.isNumberTypeAnnotation(node, opts)` and `t.assertNumberTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### numericLiteral\n```javascript\nt.numericLiteral(value)\n```\n\nSee also `t.isNumericLiteral(node, opts)` and `t.assertNumericLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n - `value`: `number` (required)\n\n---\n\n### objectExpression\n```javascript\nt.objectExpression(properties)\n```\n\nSee also `t.isObjectExpression(node, opts)` and `t.assertObjectExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `properties`: `Array<ObjectMethod | ObjectProperty | SpreadElement>` (required)\n\n---\n\n### objectMethod\n```javascript\nt.objectMethod(kind, key, params, body, computed)\n```\n\nSee also `t.isObjectMethod(node, opts)` and `t.assertObjectMethod(node, opts)`.\n\nAliases: `UserWhitespacable`, `Function`, `Scopable`, `BlockParent`, `FunctionParent`, `Method`, `ObjectMember`\n\n - `kind`: `\"method\" | \"get\" | \"set\"` (default: `'method'`)\n - `key`: if computed then `Expression` else `Identifier | Literal` (required)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `computed`: `boolean` (default: `false`)\n - `async`: `boolean` (default: `false`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | TSTypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### objectPattern\n```javascript\nt.objectPattern(properties)\n```\n\nSee also `t.isObjectPattern(node, opts)` and `t.assertObjectPattern(node, opts)`.\n\nAliases: `Pattern`, `PatternLike`, `LVal`\n\n - `properties`: `Array<RestElement | ObjectProperty>` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### objectProperty\n```javascript\nt.objectProperty(key, value, computed, shorthand, decorators)\n```\n\nSee also `t.isObjectProperty(node, opts)` and `t.assertObjectProperty(node, opts)`.\n\nAliases: `UserWhitespacable`, `Property`, `ObjectMember`\n\n - `key`: if computed then `Expression` else `Identifier | Literal` (required)\n - `value`: `Expression | PatternLike` (required)\n - `computed`: `boolean` (default: `false`)\n - `shorthand`: `boolean` (default: `false`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n\n---\n\n### objectTypeAnnotation\n```javascript\nt.objectTypeAnnotation(properties, indexers, callProperties, exact)\n```\n\nSee also `t.isObjectTypeAnnotation(node, opts)` and `t.assertObjectTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `properties`: `Array<ObjectTypeProperty | ObjectTypeSpreadProperty>` (required)\n - `indexers`: `Array<ObjectTypeIndexer>` (default: `null`)\n - `callProperties`: `Array<ObjectTypeCallProperty>` (default: `null`)\n - `exact`: `boolean` (default: `false`)\n\n---\n\n### objectTypeCallProperty\n```javascript\nt.objectTypeCallProperty(value)\n```\n\nSee also `t.isObjectTypeCallProperty(node, opts)` and `t.assertObjectTypeCallProperty(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `value`: `FlowType` (required)\n - `static`: `boolean` (default: `null`)\n\n---\n\n### objectTypeIndexer\n```javascript\nt.objectTypeIndexer(id, key, value, variance)\n```\n\nSee also `t.isObjectTypeIndexer(node, opts)` and `t.assertObjectTypeIndexer(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `id`: `Identifier` (default: `null`)\n - `key`: `FlowType` (required)\n - `value`: `FlowType` (required)\n - `variance`: `Variance` (default: `null`)\n - `static`: `boolean` (default: `null`)\n\n---\n\n### objectTypeProperty\n```javascript\nt.objectTypeProperty(key, value, variance)\n```\n\nSee also `t.isObjectTypeProperty(node, opts)` and `t.assertObjectTypeProperty(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `key`: `Identifier | StringLiteral` (required)\n - `value`: `FlowType` (required)\n - `variance`: `Variance` (default: `null`)\n - `kind`: `\"init\" | \"get\" | \"set\"` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `static`: `boolean` (default: `null`)\n\n---\n\n### objectTypeSpreadProperty\n```javascript\nt.objectTypeSpreadProperty(argument)\n```\n\nSee also `t.isObjectTypeSpreadProperty(node, opts)` and `t.assertObjectTypeSpreadProperty(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `argument`: `FlowType` (required)\n\n---\n\n### opaqueType\n```javascript\nt.opaqueType(id, typeParameters, supertype, impltype)\n```\n\nSee also `t.isOpaqueType(node, opts)` and `t.assertOpaqueType(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `supertype`: `FlowType` (default: `null`)\n - `impltype`: `FlowType` (required)\n\n---\n\n### optionalCallExpression\n```javascript\nt.optionalCallExpression(callee, arguments, optional)\n```\n\nSee also `t.isOptionalCallExpression(node, opts)` and `t.assertOptionalCallExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `callee`: `Expression` (required)\n - `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName>` (required)\n - `optional`: `boolean` (required)\n - `typeParameters`: `TypeParameterInstantiation | TSTypeParameterInstantiation` (default: `null`)\n\n---\n\n### optionalMemberExpression\n```javascript\nt.optionalMemberExpression(object, property, computed, optional)\n```\n\nSee also `t.isOptionalMemberExpression(node, opts)` and `t.assertOptionalMemberExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `object`: `Expression` (required)\n - `property`: `any` (required)\n - `computed`: `boolean` (default: `false`)\n - `optional`: `boolean` (required)\n\n---\n\n### parenthesizedExpression\n```javascript\nt.parenthesizedExpression(expression)\n```\n\nSee also `t.isParenthesizedExpression(node, opts)` and `t.assertParenthesizedExpression(node, opts)`.\n\nAliases: `Expression`, `ExpressionWrapper`\n\n - `expression`: `Expression` (required)\n\n---\n\n### privateName\n```javascript\nt.privateName(id)\n```\n\nSee also `t.isPrivateName(node, opts)` and `t.assertPrivateName(node, opts)`.\n\nAliases: `Private`\n\n - `id`: `Identifier` (required)\n\n---\n\n### program\n```javascript\nt.program(body, directives, sourceType)\n```\n\nSee also `t.isProgram(node, opts)` and `t.assertProgram(node, opts)`.\n\nAliases: `Scopable`, `BlockParent`, `Block`\n\n - `body`: `Array<Statement>` (required)\n - `directives`: `Array<Directive>` (default: `[]`)\n - `sourceType`: `\"script\" | \"module\"` (default: `'script'`)\n - `sourceFile`: `string` (default: `null`)\n\n---\n\n### qualifiedTypeIdentifier\n```javascript\nt.qualifiedTypeIdentifier(id, qualification)\n```\n\nSee also `t.isQualifiedTypeIdentifier(node, opts)` and `t.assertQualifiedTypeIdentifier(node, opts)`.\n\nAliases: `Flow`\n\n - `id`: `Identifier` (required)\n - `qualification`: `Identifier | QualifiedTypeIdentifier` (required)\n\n---\n\n### regExpLiteral\n```javascript\nt.regExpLiteral(pattern, flags)\n```\n\nSee also `t.isRegExpLiteral(node, opts)` and `t.assertRegExpLiteral(node, opts)`.\n\nAliases: `Expression`, `Literal`\n\n - `pattern`: `string` (required)\n - `flags`: `string` (default: `''`)\n\n---\n\n### restElement\n```javascript\nt.restElement(argument)\n```\n\nSee also `t.isRestElement(node, opts)` and `t.assertRestElement(node, opts)`.\n\nAliases: `LVal`, `PatternLike`\n\n - `argument`: `LVal` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### returnStatement\n```javascript\nt.returnStatement(argument)\n```\n\nSee also `t.isReturnStatement(node, opts)` and `t.assertReturnStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `argument`: `Expression` (default: `null`)\n\n---\n\n### sequenceExpression\n```javascript\nt.sequenceExpression(expressions)\n```\n\nSee also `t.isSequenceExpression(node, opts)` and `t.assertSequenceExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `expressions`: `Array<Expression>` (required)\n\n---\n\n### spreadElement\n```javascript\nt.spreadElement(argument)\n```\n\nSee also `t.isSpreadElement(node, opts)` and `t.assertSpreadElement(node, opts)`.\n\nAliases: `UnaryLike`\n\n - `argument`: `Expression` (required)\n\n---\n\n### stringLiteral\n```javascript\nt.stringLiteral(value)\n```\n\nSee also `t.isStringLiteral(node, opts)` and `t.assertStringLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n - `value`: `string` (required)\n\n---\n\n### stringLiteralTypeAnnotation\n```javascript\nt.stringLiteralTypeAnnotation(value)\n```\n\nSee also `t.isStringLiteralTypeAnnotation(node, opts)` and `t.assertStringLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `value`: `string` (required)\n\n---\n\n### stringTypeAnnotation\n```javascript\nt.stringTypeAnnotation()\n```\n\nSee also `t.isStringTypeAnnotation(node, opts)` and `t.assertStringTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### super\n```javascript\nt.super()\n```\n\nSee also `t.isSuper(node, opts)` and `t.assertSuper(node, opts)`.\n\nAliases: `Expression`\n\n\n---\n\n### switchCase\n```javascript\nt.switchCase(test, consequent)\n```\n\nSee also `t.isSwitchCase(node, opts)` and `t.assertSwitchCase(node, opts)`.\n\n - `test`: `Expression` (default: `null`)\n - `consequent`: `Array<Statement>` (required)\n\n---\n\n### switchStatement\n```javascript\nt.switchStatement(discriminant, cases)\n```\n\nSee also `t.isSwitchStatement(node, opts)` and `t.assertSwitchStatement(node, opts)`.\n\nAliases: `Statement`, `BlockParent`, `Scopable`\n\n - `discriminant`: `Expression` (required)\n - `cases`: `Array<SwitchCase>` (required)\n\n---\n\n### tSAnyKeyword\n```javascript\nt.tsAnyKeyword()\n```\n\nSee also `t.isTSAnyKeyword(node, opts)` and `t.assertTSAnyKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSArrayType\n```javascript\nt.tsArrayType(elementType)\n```\n\nSee also `t.isTSArrayType(node, opts)` and `t.assertTSArrayType(node, opts)`.\n\nAliases: `TSType`\n\n - `elementType`: `TSType` (required)\n\n---\n\n### tSAsExpression\n```javascript\nt.tsAsExpression(expression, typeAnnotation)\n```\n\nSee also `t.isTSAsExpression(node, opts)` and `t.assertTSAsExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `expression`: `Expression` (required)\n - `typeAnnotation`: `TSType` (required)\n\n---\n\n### tSBooleanKeyword\n```javascript\nt.tsBooleanKeyword()\n```\n\nSee also `t.isTSBooleanKeyword(node, opts)` and `t.assertTSBooleanKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSCallSignatureDeclaration\n```javascript\nt.tsCallSignatureDeclaration(typeParameters, parameters, typeAnnotation)\n```\n\nSee also `t.isTSCallSignatureDeclaration(node, opts)` and `t.assertTSCallSignatureDeclaration(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n\n---\n\n### tSConditionalType\n```javascript\nt.tsConditionalType(checkType, extendsType, trueType, falseType)\n```\n\nSee also `t.isTSConditionalType(node, opts)` and `t.assertTSConditionalType(node, opts)`.\n\nAliases: `TSType`\n\n - `checkType`: `TSType` (required)\n - `extendsType`: `TSType` (required)\n - `trueType`: `TSType` (required)\n - `falseType`: `TSType` (required)\n\n---\n\n### tSConstructSignatureDeclaration\n```javascript\nt.tsConstructSignatureDeclaration(typeParameters, parameters, typeAnnotation)\n```\n\nSee also `t.isTSConstructSignatureDeclaration(node, opts)` and `t.assertTSConstructSignatureDeclaration(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n\n---\n\n### tSConstructorType\n```javascript\nt.tsConstructorType(typeParameters, typeAnnotation)\n```\n\nSee also `t.isTSConstructorType(node, opts)` and `t.assertTSConstructorType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n\n---\n\n### tSDeclareFunction\n```javascript\nt.tsDeclareFunction(id, typeParameters, params, returnType)\n```\n\nSee also `t.isTSDeclareFunction(node, opts)` and `t.assertTSDeclareFunction(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (default: `null`)\n - `typeParameters`: `TSTypeParameterDeclaration | Noop` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `returnType`: `TSTypeAnnotation | Noop` (default: `null`)\n - `async`: `boolean` (default: `false`)\n - `declare`: `boolean` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n\n---\n\n### tSDeclareMethod\n```javascript\nt.tsDeclareMethod(decorators, key, typeParameters, params, returnType)\n```\n\nSee also `t.isTSDeclareMethod(node, opts)` and `t.assertTSDeclareMethod(node, opts)`.\n\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `key`: `Identifier | StringLiteral | NumericLiteral | Expression` (required)\n - `typeParameters`: `TSTypeParameterDeclaration | Noop` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `returnType`: `TSTypeAnnotation | Noop` (default: `null`)\n - `abstract`: `boolean` (default: `null`)\n - `access`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `async`: `boolean` (default: `false`)\n - `computed`: `boolean` (default: `false`)\n - `generator`: `boolean` (default: `false`)\n - `kind`: `\"get\" | \"set\" | \"method\" | \"constructor\"` (default: `'method'`)\n - `optional`: `boolean` (default: `null`)\n - `static`: `boolean` (default: `null`)\n\n---\n\n### tSEnumDeclaration\n```javascript\nt.tsEnumDeclaration(id, members)\n```\n\nSee also `t.isTSEnumDeclaration(node, opts)` and `t.assertTSEnumDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `members`: `Array<TSEnumMember>` (required)\n - `const`: `boolean` (default: `null`)\n - `declare`: `boolean` (default: `null`)\n - `initializer`: `Expression` (default: `null`)\n\n---\n\n### tSEnumMember\n```javascript\nt.tsEnumMember(id, initializer)\n```\n\nSee also `t.isTSEnumMember(node, opts)` and `t.assertTSEnumMember(node, opts)`.\n\n - `id`: `Identifier | StringLiteral` (required)\n - `initializer`: `Expression` (default: `null`)\n\n---\n\n### tSExportAssignment\n```javascript\nt.tsExportAssignment(expression)\n```\n\nSee also `t.isTSExportAssignment(node, opts)` and `t.assertTSExportAssignment(node, opts)`.\n\nAliases: `Statement`\n\n - `expression`: `Expression` (required)\n\n---\n\n### tSExpressionWithTypeArguments\n```javascript\nt.tsExpressionWithTypeArguments(expression, typeParameters)\n```\n\nSee also `t.isTSExpressionWithTypeArguments(node, opts)` and `t.assertTSExpressionWithTypeArguments(node, opts)`.\n\nAliases: `TSType`\n\n - `expression`: `TSEntityName` (required)\n - `typeParameters`: `TSTypeParameterInstantiation` (default: `null`)\n\n---\n\n### tSExternalModuleReference\n```javascript\nt.tsExternalModuleReference(expression)\n```\n\nSee also `t.isTSExternalModuleReference(node, opts)` and `t.assertTSExternalModuleReference(node, opts)`.\n\n - `expression`: `StringLiteral` (required)\n\n---\n\n### tSFunctionType\n```javascript\nt.tsFunctionType(typeParameters, typeAnnotation)\n```\n\nSee also `t.isTSFunctionType(node, opts)` and `t.assertTSFunctionType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n\n---\n\n### tSImportEqualsDeclaration\n```javascript\nt.tsImportEqualsDeclaration(id, moduleReference)\n```\n\nSee also `t.isTSImportEqualsDeclaration(node, opts)` and `t.assertTSImportEqualsDeclaration(node, opts)`.\n\nAliases: `Statement`\n\n - `id`: `Identifier` (required)\n - `moduleReference`: `TSEntityName | TSExternalModuleReference` (required)\n - `isExport`: `boolean` (default: `null`)\n\n---\n\n### tSIndexSignature\n```javascript\nt.tsIndexSignature(parameters, typeAnnotation)\n```\n\nSee also `t.isTSIndexSignature(node, opts)` and `t.assertTSIndexSignature(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `parameters`: `Array<Identifier>` (required)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSIndexedAccessType\n```javascript\nt.tsIndexedAccessType(objectType, indexType)\n```\n\nSee also `t.isTSIndexedAccessType(node, opts)` and `t.assertTSIndexedAccessType(node, opts)`.\n\nAliases: `TSType`\n\n - `objectType`: `TSType` (required)\n - `indexType`: `TSType` (required)\n\n---\n\n### tSInferType\n```javascript\nt.tsInferType(typeParameter)\n```\n\nSee also `t.isTSInferType(node, opts)` and `t.assertTSInferType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeParameter`: `TSType` (required)\n\n---\n\n### tSInterfaceBody\n```javascript\nt.tsInterfaceBody(body)\n```\n\nSee also `t.isTSInterfaceBody(node, opts)` and `t.assertTSInterfaceBody(node, opts)`.\n\n - `body`: `Array<TSTypeElement>` (required)\n\n---\n\n### tSInterfaceDeclaration\n```javascript\nt.tsInterfaceDeclaration(id, typeParameters, extends, body)\n```\n\nSee also `t.isTSInterfaceDeclaration(node, opts)` and `t.assertTSInterfaceDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n - `extends`: `Array<TSExpressionWithTypeArguments>` (default: `null`)\n - `body`: `TSInterfaceBody` (required)\n - `declare`: `boolean` (default: `null`)\n\n---\n\n### tSIntersectionType\n```javascript\nt.tsIntersectionType(types)\n```\n\nSee also `t.isTSIntersectionType(node, opts)` and `t.assertTSIntersectionType(node, opts)`.\n\nAliases: `TSType`\n\n - `types`: `Array<TSType>` (required)\n\n---\n\n### tSLiteralType\n```javascript\nt.tsLiteralType(literal)\n```\n\nSee also `t.isTSLiteralType(node, opts)` and `t.assertTSLiteralType(node, opts)`.\n\nAliases: `TSType`\n\n - `literal`: `NumericLiteral | StringLiteral | BooleanLiteral` (required)\n\n---\n\n### tSMappedType\n```javascript\nt.tsMappedType(typeParameter, typeAnnotation)\n```\n\nSee also `t.isTSMappedType(node, opts)` and `t.assertTSMappedType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeParameter`: `TSTypeParameter` (required)\n - `typeAnnotation`: `TSType` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSMethodSignature\n```javascript\nt.tsMethodSignature(key, typeParameters, parameters, typeAnnotation)\n```\n\nSee also `t.isTSMethodSignature(node, opts)` and `t.assertTSMethodSignature(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `key`: `Expression` (required)\n - `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `computed`: `boolean` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n\n---\n\n### tSModuleBlock\n```javascript\nt.tsModuleBlock(body)\n```\n\nSee also `t.isTSModuleBlock(node, opts)` and `t.assertTSModuleBlock(node, opts)`.\n\n - `body`: `Array<Statement>` (required)\n\n---\n\n### tSModuleDeclaration\n```javascript\nt.tsModuleDeclaration(id, body)\n```\n\nSee also `t.isTSModuleDeclaration(node, opts)` and `t.assertTSModuleDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier | StringLiteral` (required)\n - `body`: `TSModuleBlock | TSModuleDeclaration` (required)\n - `declare`: `boolean` (default: `null`)\n - `global`: `boolean` (default: `null`)\n\n---\n\n### tSNamespaceExportDeclaration\n```javascript\nt.tsNamespaceExportDeclaration(id)\n```\n\nSee also `t.isTSNamespaceExportDeclaration(node, opts)` and `t.assertTSNamespaceExportDeclaration(node, opts)`.\n\nAliases: `Statement`\n\n - `id`: `Identifier` (required)\n\n---\n\n### tSNeverKeyword\n```javascript\nt.tsNeverKeyword()\n```\n\nSee also `t.isTSNeverKeyword(node, opts)` and `t.assertTSNeverKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSNonNullExpression\n```javascript\nt.tsNonNullExpression(expression)\n```\n\nSee also `t.isTSNonNullExpression(node, opts)` and `t.assertTSNonNullExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `expression`: `Expression` (required)\n\n---\n\n### tSNullKeyword\n```javascript\nt.tsNullKeyword()\n```\n\nSee also `t.isTSNullKeyword(node, opts)` and `t.assertTSNullKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSNumberKeyword\n```javascript\nt.tsNumberKeyword()\n```\n\nSee also `t.isTSNumberKeyword(node, opts)` and `t.assertTSNumberKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSObjectKeyword\n```javascript\nt.tsObjectKeyword()\n```\n\nSee also `t.isTSObjectKeyword(node, opts)` and `t.assertTSObjectKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSParameterProperty\n```javascript\nt.tsParameterProperty(parameter)\n```\n\nSee also `t.isTSParameterProperty(node, opts)` and `t.assertTSParameterProperty(node, opts)`.\n\nAliases: `LVal`\n\n - `parameter`: `Identifier | AssignmentPattern` (required)\n - `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSParenthesizedType\n```javascript\nt.tsParenthesizedType(typeAnnotation)\n```\n\nSee also `t.isTSParenthesizedType(node, opts)` and `t.assertTSParenthesizedType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeAnnotation`: `TSType` (required)\n\n---\n\n### tSPropertySignature\n```javascript\nt.tsPropertySignature(key, typeAnnotation, initializer)\n```\n\nSee also `t.isTSPropertySignature(node, opts)` and `t.assertTSPropertySignature(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `key`: `Expression` (required)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `initializer`: `Expression` (default: `null`)\n - `computed`: `boolean` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSQualifiedName\n```javascript\nt.tsQualifiedName(left, right)\n```\n\nSee also `t.isTSQualifiedName(node, opts)` and `t.assertTSQualifiedName(node, opts)`.\n\nAliases: `TSEntityName`\n\n - `left`: `TSEntityName` (required)\n - `right`: `Identifier` (required)\n\n---\n\n### tSStringKeyword\n```javascript\nt.tsStringKeyword()\n```\n\nSee also `t.isTSStringKeyword(node, opts)` and `t.assertTSStringKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSSymbolKeyword\n```javascript\nt.tsSymbolKeyword()\n```\n\nSee also `t.isTSSymbolKeyword(node, opts)` and `t.assertTSSymbolKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSThisType\n```javascript\nt.tsThisType()\n```\n\nSee also `t.isTSThisType(node, opts)` and `t.assertTSThisType(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSTupleType\n```javascript\nt.tsTupleType(elementTypes)\n```\n\nSee also `t.isTSTupleType(node, opts)` and `t.assertTSTupleType(node, opts)`.\n\nAliases: `TSType`\n\n - `elementTypes`: `Array<TSType>` (required)\n\n---\n\n### tSTypeAliasDeclaration\n```javascript\nt.tsTypeAliasDeclaration(id, typeParameters, typeAnnotation)\n```\n\nSee also `t.isTSTypeAliasDeclaration(node, opts)` and `t.assertTSTypeAliasDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TSTypeParameterDeclaration` (default: `null`)\n - `typeAnnotation`: `TSType` (required)\n - `declare`: `boolean` (default: `null`)\n\n---\n\n### tSTypeAnnotation\n```javascript\nt.tsTypeAnnotation(typeAnnotation)\n```\n\nSee also `t.isTSTypeAnnotation(node, opts)` and `t.assertTSTypeAnnotation(node, opts)`.\n\n - `typeAnnotation`: `TSType` (required)\n\n---\n\n### tSTypeAssertion\n```javascript\nt.tsTypeAssertion(typeAnnotation, expression)\n```\n\nSee also `t.isTSTypeAssertion(node, opts)` and `t.assertTSTypeAssertion(node, opts)`.\n\nAliases: `Expression`\n\n - `typeAnnotation`: `TSType` (required)\n - `expression`: `Expression` (required)\n\n---\n\n### tSTypeLiteral\n```javascript\nt.tsTypeLiteral(members)\n```\n\nSee also `t.isTSTypeLiteral(node, opts)` and `t.assertTSTypeLiteral(node, opts)`.\n\nAliases: `TSType`\n\n - `members`: `Array<TSTypeElement>` (required)\n\n---\n\n### tSTypeOperator\n```javascript\nt.tsTypeOperator(typeAnnotation)\n```\n\nSee also `t.isTSTypeOperator(node, opts)` and `t.assertTSTypeOperator(node, opts)`.\n\nAliases: `TSType`\n\n - `typeAnnotation`: `TSType` (required)\n - `operator`: `string` (default: `null`)\n\n---\n\n### tSTypeParameter\n```javascript\nt.tsTypeParameter(constraint, default)\n```\n\nSee also `t.isTSTypeParameter(node, opts)` and `t.assertTSTypeParameter(node, opts)`.\n\n - `constraint`: `TSType` (default: `null`)\n - `default`: `TSType` (default: `null`)\n - `name`: `string` (default: `null`)\n\n---\n\n### tSTypeParameterDeclaration\n```javascript\nt.tsTypeParameterDeclaration(params)\n```\n\nSee also `t.isTSTypeParameterDeclaration(node, opts)` and `t.assertTSTypeParameterDeclaration(node, opts)`.\n\n - `params`: `Array<TSTypeParameter>` (required)\n\n---\n\n### tSTypeParameterInstantiation\n```javascript\nt.tsTypeParameterInstantiation(params)\n```\n\nSee also `t.isTSTypeParameterInstantiation(node, opts)` and `t.assertTSTypeParameterInstantiation(node, opts)`.\n\n - `params`: `Array<TSType>` (required)\n\n---\n\n### tSTypePredicate\n```javascript\nt.tsTypePredicate(parameterName, typeAnnotation)\n```\n\nSee also `t.isTSTypePredicate(node, opts)` and `t.assertTSTypePredicate(node, opts)`.\n\nAliases: `TSType`\n\n - `parameterName`: `Identifier | TSThisType` (required)\n - `typeAnnotation`: `TSTypeAnnotation` (required)\n\n---\n\n### tSTypeQuery\n```javascript\nt.tsTypeQuery(exprName)\n```\n\nSee also `t.isTSTypeQuery(node, opts)` and `t.assertTSTypeQuery(node, opts)`.\n\nAliases: `TSType`\n\n - `exprName`: `TSEntityName` (required)\n\n---\n\n### tSTypeReference\n```javascript\nt.tsTypeReference(typeName, typeParameters)\n```\n\nSee also `t.isTSTypeReference(node, opts)` and `t.assertTSTypeReference(node, opts)`.\n\nAliases: `TSType`\n\n - `typeName`: `TSEntityName` (required)\n - `typeParameters`: `TSTypeParameterInstantiation` (default: `null`)\n\n---\n\n### tSUndefinedKeyword\n```javascript\nt.tsUndefinedKeyword()\n```\n\nSee also `t.isTSUndefinedKeyword(node, opts)` and `t.assertTSUndefinedKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSUnionType\n```javascript\nt.tsUnionType(types)\n```\n\nSee also `t.isTSUnionType(node, opts)` and `t.assertTSUnionType(node, opts)`.\n\nAliases: `TSType`\n\n - `types`: `Array<TSType>` (required)\n\n---\n\n### tSVoidKeyword\n```javascript\nt.tsVoidKeyword()\n```\n\nSee also `t.isTSVoidKeyword(node, opts)` and `t.assertTSVoidKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### taggedTemplateExpression\n```javascript\nt.taggedTemplateExpression(tag, quasi)\n```\n\nSee also `t.isTaggedTemplateExpression(node, opts)` and `t.assertTaggedTemplateExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `tag`: `Expression` (required)\n - `quasi`: `TemplateLiteral` (required)\n\n---\n\n### templateElement\n```javascript\nt.templateElement(value, tail)\n```\n\nSee also `t.isTemplateElement(node, opts)` and `t.assertTemplateElement(node, opts)`.\n\n - `value` (required)\n - `tail`: `boolean` (default: `false`)\n\n---\n\n### templateLiteral\n```javascript\nt.templateLiteral(quasis, expressions)\n```\n\nSee also `t.isTemplateLiteral(node, opts)` and `t.assertTemplateLiteral(node, opts)`.\n\nAliases: `Expression`, `Literal`\n\n - `quasis`: `Array<TemplateElement>` (required)\n - `expressions`: `Array<Expression>` (required)\n\n---\n\n### thisExpression\n```javascript\nt.thisExpression()\n```\n\nSee also `t.isThisExpression(node, opts)` and `t.assertThisExpression(node, opts)`.\n\nAliases: `Expression`\n\n\n---\n\n### thisTypeAnnotation\n```javascript\nt.thisTypeAnnotation()\n```\n\nSee also `t.isThisTypeAnnotation(node, opts)` and `t.assertThisTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`, `FlowBaseAnnotation`\n\n\n---\n\n### throwStatement\n```javascript\nt.throwStatement(argument)\n```\n\nSee also `t.isThrowStatement(node, opts)` and `t.assertThrowStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `argument`: `Expression` (required)\n\n---\n\n### tryStatement\n```javascript\nt.tryStatement(block, handler, finalizer)\n```\n\nSee also `t.isTryStatement(node, opts)` and `t.assertTryStatement(node, opts)`.\n\nAliases: `Statement`\n\n - `block`: `BlockStatement` (required)\n - `handler`: `CatchClause` (default: `null`)\n - `finalizer`: `BlockStatement` (default: `null`)\n\n---\n\n### tupleTypeAnnotation\n```javascript\nt.tupleTypeAnnotation(types)\n```\n\nSee also `t.isTupleTypeAnnotation(node, opts)` and `t.assertTupleTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `types`: `Array<FlowType>` (required)\n\n---\n\n### typeAlias\n```javascript\nt.typeAlias(id, typeParameters, right)\n```\n\nSee also `t.isTypeAlias(node, opts)` and `t.assertTypeAlias(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `right`: `FlowType` (required)\n\n---\n\n### typeAnnotation\n```javascript\nt.typeAnnotation(typeAnnotation)\n```\n\nSee also `t.isTypeAnnotation(node, opts)` and `t.assertTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `typeAnnotation`: `FlowType` (required)\n\n---\n\n### typeCastExpression\n```javascript\nt.typeCastExpression(expression, typeAnnotation)\n```\n\nSee also `t.isTypeCastExpression(node, opts)` and `t.assertTypeCastExpression(node, opts)`.\n\nAliases: `Flow`, `ExpressionWrapper`, `Expression`\n\n - `expression`: `Expression` (required)\n - `typeAnnotation`: `TypeAnnotation` (required)\n\n---\n\n### typeParameter\n```javascript\nt.typeParameter(bound, default, variance)\n```\n\nSee also `t.isTypeParameter(node, opts)` and `t.assertTypeParameter(node, opts)`.\n\nAliases: `Flow`\n\n - `bound`: `TypeAnnotation` (default: `null`)\n - `default`: `FlowType` (default: `null`)\n - `variance`: `Variance` (default: `null`)\n - `name`: `string` (default: `null`)\n\n---\n\n### typeParameterDeclaration\n```javascript\nt.typeParameterDeclaration(params)\n```\n\nSee also `t.isTypeParameterDeclaration(node, opts)` and `t.assertTypeParameterDeclaration(node, opts)`.\n\nAliases: `Flow`\n\n - `params`: `Array<TypeParameter>` (required)\n\n---\n\n### typeParameterInstantiation\n```javascript\nt.typeParameterInstantiation(params)\n```\n\nSee also `t.isTypeParameterInstantiation(node, opts)` and `t.assertTypeParameterInstantiation(node, opts)`.\n\nAliases: `Flow`\n\n - `params`: `Array<FlowType>` (required)\n\n---\n\n### typeofTypeAnnotation\n```javascript\nt.typeofTypeAnnotation(argument)\n```\n\nSee also `t.isTypeofTypeAnnotation(node, opts)` and `t.assertTypeofTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `argument`: `FlowType` (required)\n\n---\n\n### unaryExpression\n```javascript\nt.unaryExpression(operator, argument, prefix)\n```\n\nSee also `t.isUnaryExpression(node, opts)` and `t.assertUnaryExpression(node, opts)`.\n\nAliases: `UnaryLike`, `Expression`\n\n - `operator`: `\"void\" | \"throw\" | \"delete\" | \"!\" | \"+\" | \"-\" | \"~\" | \"typeof\"` (required)\n - `argument`: `Expression` (required)\n - `prefix`: `boolean` (default: `true`)\n\n---\n\n### unionTypeAnnotation\n```javascript\nt.unionTypeAnnotation(types)\n```\n\nSee also `t.isUnionTypeAnnotation(node, opts)` and `t.assertUnionTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowType`\n\n - `types`: `Array<FlowType>` (required)\n\n---\n\n### updateExpression\n```javascript\nt.updateExpression(operator, argument, prefix)\n```\n\nSee also `t.isUpdateExpression(node, opts)` and `t.assertUpdateExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `operator`: `\"++\" | \"--\"` (required)\n - `argument`: `Expression` (required)\n - `prefix`: `boolean` (default: `false`)\n\n---\n\n### variableDeclaration\n```javascript\nt.variableDeclaration(kind, declarations)\n```\n\nSee also `t.isVariableDeclaration(node, opts)` and `t.assertVariableDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `kind`: `\"var\" | \"let\" | \"const\"` (required)\n - `declarations`: `Array<VariableDeclarator>` (required)\n - `declare`: `boolean` (default: `null`)\n\n---\n\n### variableDeclarator\n```javascript\nt.variableDeclarator(id, init)\n```\n\nSee also `t.isVariableDeclarator(node, opts)` and `t.assertVariableDeclarator(node, opts)`.\n\n - `id`: `LVal` ","maintainers":[{"email":"daniel@tschinder.de","name":"danez"},{"email":"bng412@gmail.com","name":"existentialism"},{"email":"hi@henryzoo.com","name":"hzoo"},{"email":"loganfsmyth@gmail.com","name":"loganfsmyth"},{"email":"contact@xtuc.fr","name":"xtuc"}],"time":{"modified":"2018-04-23T04:30:04.393Z","created":"2017-10-30T18:34:55.832Z","7.0.0-beta.4":"2017-10-30T18:34:55.832Z","7.0.0-beta.5":"2017-10-30T20:56:35.712Z","7.0.0-beta.31":"2017-11-03T20:03:35.736Z","7.0.0-beta.32":"2017-11-12T13:33:28.719Z","7.0.0-beta.33":"2017-12-01T14:28:33.599Z","7.0.0-beta.34":"2017-12-02T14:39:33.460Z","7.0.0-beta.35":"2017-12-14T21:47:57.804Z","7.0.0-beta.36":"2017-12-25T19:04:52.122Z","7.0.0-beta.37":"2018-01-08T16:02:39.412Z","7.0.0-beta.38":"2018-01-17T16:32:05.820Z","7.0.0-beta.39":"2018-01-30T20:27:40.473Z","7.0.0-beta.40":"2018-02-12T16:41:50.514Z","7.0.0-beta.41":"2018-03-14T16:25:38.092Z","7.0.0-beta.42":"2018-03-15T20:50:12.878Z","7.0.0-beta.43":"2018-04-02T16:48:03.644Z","7.0.0-beta.44":"2018-04-02T22:19:47.274Z","7.0.0-beta.45":"2018-04-23T01:55:34.172Z","7.0.0-beta.46":"2018-04-23T04:29:58.691Z"},"homepage":"https://babeljs.io/","repository":{"type":"git","url":"https://github.com/babel/babel/tree/master/packages/babel-types"},"author":{"name":"Sebastian McKenzie","email":"sebmck@gmail.com"},"license":"MIT","readmeFilename":"README.md","users":{"fangbot":true},"_attachments":{},"_etag":"W/\"5add614c-17935\"","_lastModified":"Mon, 23 Apr 2018 4:30:04 GMT"}